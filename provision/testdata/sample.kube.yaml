apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: acicontainersoperators.aci.ctrl
spec:
  group: aci.ctrl
  names:
    kind: AciContainersOperator
    listKind: AciContainersOperatorList
    plural: acicontainersoperators
    singular: acicontainersoperator
  scope: Namespaced
  version: v1alpha1
---
apiVersion: v1
kind: Namespace
metadata:
  name: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
  annotations:
    openshift.io/node-selector: ''
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: snatglobalinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatGlobalInfo
    listKind: SnatGlobalInfoList
    plural: snatglobalinfos
    singular: snatglobalinfo
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: snatpolicies.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatPolicy
    listKind: SnatPolicyList
    plural: snatpolicies
    singular: snatpolicy
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            selector:
              properties:
                labels:
                  type: object
                  properties:
                    additionalProperties:
                      type: string
                namespace:
                  type: string
              type: object
            snatIp:
              type: array
            destIp:
              type: array
          type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: nodeinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: NodeInfo
    listKind: NodeInfoList
    plural: nodeinfos
    singular: nodeinfo
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: rdconfigs.aci.snat
spec:
  group: aci.snat
  names:
    kind: RdConfig
    listKind: RdConfigList
    plural: rdconfigs
    singular: rdconfig
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: aciistiooperators.aci.istio
spec:
  group: aci.istio
  names:
    kind: AciIstioOperator
    listKind: AciIstioOperatorList
    plural: aciistiooperators
    singular: aciistiooperator
  scope: Namespaced
  version: v1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-operator-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
data:
  spec: |-
    {
        "flavor": "kubernetes-1.15",
        "config": ""
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-containers-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
data:
  controller-config: |-
    {
        "log-level": "info",
        "apic-hosts": [
            "10.1.1.101"
        ],
        "apic-username": "mykube",
        "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
        "apic-use-inst-tag": true,
        "aci-prefix": "mykube",
        "aci-vmm-type": "Kubernetes",
        "aci-vmm-domain": "mykube",
        "aci-vmm-controller": "mykube",
        "aci-policy-tenant": "mykube",
        "require-netpol-annot": false,
        "install-istio": true,
        "istio-profile": "demo",
        "aci-podbd-dn": "uni/tn-mykube/BD-aci-containers-mykube-pod-bd",
        "aci-nodebd-dn": "uni/tn-mykube/BD-aci-containers-mykube-node-bd",
        "aci-service-phys-dom": "mykube-pdom",
        "aci-service-encap": "vlan-4003",
        "aci-service-monitor-interval": 5,
        "aci-pbr-tracking-non-snat": false,
        "aci-vrf-tenant": "common",
        "aci-l3out": "mykube_l3out",
        "aci-ext-networks": [
            "mykube_extepg"
        ],
        "aci-vrf": "mykube-vrf",
        "default-endpoint-group": {
            "policy-space": "mykube",
            "name": "aci-containers-mykube|aci-containers-default"
        },
        "max-nodes-svc-graph": 32,
        "namespace-default-endpoint-group": {
            "aci-containers-system": {
                "policy-space": "mykube",
                "name": "aci-containers-mykube|aci-containers-system"
            },
            "istio-operator": {
                "policy-space": "mykube",
                "name": "aci-containers-mykube|aci-containers-istio"
            },
            "istio-system": {
                "policy-space": "mykube",
                "name": "aci-containers-mykube|aci-containers-istio"
            },
            "kube-system": {
                "policy-space": "mykube",
                "name": "aci-containers-mykube|aci-containers-system"
            }        },
        "service-ip-pool": [
            {
                "end": "10.3.0.254",
                "start": "10.3.0.2"
            }
        ],
        "snat-contract-scope": "global",
        "static-service-ip-pool": [
            {
                "end": "10.4.0.254",
                "start": "10.4.0.2"
            }
        ],
        "pod-ip-pool": [
            {
                "end": "10.2.255.254",
                "start": "10.2.0.2"
            }
        ],
        "pod-subnet-chunk-size": 32,
        "node-service-ip-pool": [
            {
                "end": "10.5.0.254",
                "start": "10.5.0.2"
            }
        ],
        "node-service-subnets": [
            "10.5.0.1/24"
        ]
    }
  host-agent-config: |-
    {
        "ep-registry": null,
        "opflex-mode": null,
        "log-level": "info",
        "aci-snat-namespace": "aci-containers-system",
        "aci-vmm-type": "Kubernetes",
        "aci-vmm-domain": "mykube",
        "aci-vmm-controller": "mykube",
        "aci-prefix": "mykube",
        "aci-vrf": "mykube-vrf",
        "aci-vrf-tenant": "common",
        "service-vlan": 4003,
        "kubeapi-vlan": 4001,
        "pod-subnet": "10.2.0.1/16",
        "node-subnet": "10.1.0.1/16",
        "encap-type": "vxlan",
        "aci-infra-vlan": 4093,
        "cni-netconfig": [
            {
                "gateway": "10.2.0.1",
                "routes": [
                    {
                        "dst": "0.0.0.0/0",
                        "gw": "10.2.0.1"
                    }
                ],
                "subnet": "10.2.0.0/16"
            }
        ],
        "default-endpoint-group": {
            "policy-space": "mykube",
            "name": "aci-containers-mykube|aci-containers-default"
        },
        "namespace-default-endpoint-group": {
            "aci-containers-system": {
                "policy-space": "mykube",
                "name": "aci-containers-mykube|aci-containers-system"
            },
            "istio-operator": {
                "policy-space": "mykube",
                "name": "aci-containers-mykube|aci-containers-istio"
            },
            "istio-system": {
                "policy-space": "mykube",
                "name": "aci-containers-mykube|aci-containers-istio"
            },
            "kube-system": {
                "policy-space": "mykube",
                "name": "aci-containers-mykube|aci-containers-system"
            }        },
        "enable-drop-log": true
    }
  opflex-agent-config: |-
    {
        "log": {
            "level": "info"
        },
        "opflex": {
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: snat-operator-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
data:
    "start": "5000"
    "end": "65000"
    "ports-per-node": "3000"
---
apiVersion: v1
kind: Secret
metadata:
  name: aci-user-cert
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
data:
  user.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUNlQUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQW1Jd2dnSmVBZ0VBQW9HQkFOTmkzVUZvbWhtQjJrVlYKWkxOdVB3aG5wUW9Lb2Rkelo1Qmw2YktsZjlGMEFOQmNrNVlUWGhRcXZ1cGt6SFVUVWxCbW5VS1daZHRkQmovbwptQW5wNlZVNmVVNlg2V2ljWTJtSHhxOE0zNXVYcXc2MjRoSlRrN0JxZTh6R0o1NTRFeGxTOHRJcjBVVDNkbThXCk5Vb3JFZmR0dlFXdUVvVENZYnowUVBXUUp4MlhBZ01CQUFFQ2dZRUF3TXFlZVJWcDFuRzBIU0F3NCtWYzM5R0gKbUl6eDVvcCtuaGdVK0xZd3lWcy9rc21jWVhmd2lmd2llNnpMUE13T2V2M2IxK3RMb3JKSkRPaWFJaENRbVY2UApEL2Q1QWhCQnNIQUR3SGV3c1hFdm1XeGl1cEhVK3MxSUFIUEJoOXJoMFlnTGlMZ0IxWkZQSk5EOUFWTTJNZU1SCmcyMmZoWEJicXU1RUZHSjI0U0VDUVFEcWJIeTlTQXdMSUdOZHFaTExiUDZCdlVaSFMrd3k2R2JhQVlWdlZrcWcKNG1TbzY5aHdIUXhRUmYvOVF2TVN1b2lZbUc0TDdaQkRpUkMzdmJFNHVsMWRBa0VBNXRlUU9uN2FCSmdMeXliSgpxbkYreFlJRFVWMk0wQ0owQmpxNndjTkg5MnpSdnZVc0hxVnBwMUs5WTVsZGN6WGlYU014cHROcGIvMEhpbGk4CkRDSkRnd0pBWnE0eVRTNWJxQnY5cWk3Mmo0Z2tTbXUvZHNjNHBHdkxjVDR0VmtFejJ4aVBBcmFiVFRCTURuVTYKMVpJWHFtSnVKbmpONndlWm94dE1hVTc3YTErbU9RSkJBTUdlUXJuZGxnM09YZTM2VGFIcGFoUk5WVzBVa3p3cgorYmNUNFhzTnlUb05pdXVwQm1WNkJtRXlzK2xyUkllU3haZXJJa1UwQTdiTHUxeGR5dlErZFBNQ1FRQ0lNOW0yCkxXVVkvVUpINjA5QzUwK3A3b1F1cWVHWVRyRlVNcXFiaUJ5eFVjdCt4V0FaTXpmZWljNldaOFRvczFZSmZqYmcKOWFCL3dqVUdXazMwY1FtTAotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  user.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI1akNDQVU4Q0FnUG9NQTBHQ1NxR1NJYjNEUUVCQlFVQU1Ec3hDekFKQmdOVkJBWVRBbFZUTVJZd0ZBWUQKVlFRS0RBMURhWE5qYnlCVGVYTjBaVzF6TVJRd0VnWURWUVFEREF0VmMyVnlJRzE1YTNWaVpUQWVGdzB4TnpBMgpNREl3TmpJMU1qUmFGdzB5TnpBMU16RXdOakkxTWpSYU1Ec3hDekFKQmdOVkJBWVRBbFZUTVJZd0ZBWURWUVFLCkRBMURhWE5qYnlCVGVYTjBaVzF6TVJRd0VnWURWUVFEREF0VmMyVnlJRzE1YTNWaVpUQ0JuekFOQmdrcWhraUcKOXcwQkFRRUZBQU9CalFBd2dZa0NnWUVBMDJMZFFXaWFHWUhhUlZWa3MyNC9DR2VsQ2dxaDEzTm5rR1hwc3FWLwowWFFBMEZ5VGxoTmVGQ3ErNm1UTWRSTlNVR2FkUXBabDIxMEdQK2lZQ2VucFZUcDVUcGZwYUp4amFZZkdyd3pmCm01ZXJEcmJpRWxPVHNHcDd6TVlubm5nVEdWTHkwaXZSUlBkMmJ4WTFTaXNSOTIyOUJhNFNoTUpodlBSQTlaQW4KSFpjQ0F3RUFBVEFOQmdrcWhraUc5dzBCQVFVRkFBT0JnUUFvTVlhbHNaTDhZTHNBOFpwQnV2eFAydGwyWlRnYQp4WnFuN1hjZUlURlJ6UkR3M3lYOHZud0wxVkovSVJjekorcGUvNzB5NC90MVBpekxFM3h0VnpjSFU0S1ozWDMzCmg0ZGFnZmdWeHVVRFV1NWNjY1dVVTVVNnFNSkFEclBMaXh3d3FZUExKNXRUTUFtck9KZW4wNEt1VitYd0M5TVoKUDE2VXNKZmRETmdodmc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-controller
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-host-agent
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
  name: aci-containers:controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  - events
  - replicationcontrollers
  - serviceaccounts
  verbs:
  - list
  - watch
  - get
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
  - clusterroles
  - clusterrolebindings
  verbs:
  - '*'
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - "install.istio.io"
  resources:
  - istiocontrolplanes
  - istiooperators
  verbs:
  - '*'
- apiGroups:
  - "aci.istio"
  resources:
  - aciistiooperators
  - aciistiooperator
  verbs:
  - '*'
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  - daemonsets
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - nodes
  - services/status
  verbs:
  - update
- apiGroups:
  - "monitoring.coreos.com"
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies/finalizers
  - snatpolicies/status
  - nodeinfos
  verbs:
  - update
  - create
  - list
  - watch
  - get
  - delete
- apiGroups:
  - "aci.snat"
  resources:
  - snatglobalinfos
  - snatpolicies
  - nodeinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - apps.openshift.io
  resources:
  - deploymentconfigs
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
  name: aci-containers:host-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  - replicationcontrollers
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies
  - snatglobalinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - nodeinfos
  verbs:
  - create
  - update
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:controller
  labels:
    aci-containers-config-version: "dummy"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:controller
subjects:
- kind: ServiceAccount
  name: aci-containers-controller
  namespace: aci-containers-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:host-agent
  labels:
    aci-containers-config-version: "dummy"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:host-agent
subjects:
- kind: ServiceAccount
  name: aci-containers-host-agent
  namespace: aci-containers-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aci-containers-host
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-host
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-host
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - operator: Exists
          effect: NoSchedule
      priorityClassName: system-cluster-critical
      containers:
        - name: aci-containers-host
          image: noiro/aci-containers-host:master-test
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
                - SYS_PTRACE
          env:
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TENANT
              value: "mykube"
            - name: NODE_EPG
              value: "aci-containers-mykube|aci-containers-nodes"
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
            - name: cni-conf
              mountPath: /mnt/cni-conf
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: host-config-volume
              mountPath: /usr/local/etc/aci-containers/
          livenessProbe:
            httpGet:
              path: /status
              port: 8090
        - name: opflex-agent
          env:
            - name: REBOOT_WITH_OVS
              value: "true"
          image: noiro/opflex:master-test
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: opflex-config-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/conf.d
        - name: mcast-daemon
          image: noiro/opflex:master-test
          command: ["/bin/sh"]
          args: ["/usr/local/bin/launch-mcastdaemon.sh"]
          imagePullPolicy: Always
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
      restartPolicy: Always
      volumes:
        - name: cni-bin
          hostPath:
            path: /opt
        - name: cni-conf
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: host-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: host-agent-config
                path: host-agent.conf
        - name: opflex-hostconfig-volume
          emptyDir:
            medium: Memory
        - name: opflex-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: opflex-agent-config
                path: local.conf
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aci-containers-openvswitch
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-openvswitch
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-openvswitch
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - operator: Exists
          effect: NoSchedule
      priorityClassName: system-cluster-critical
      containers:
        - name: aci-containers-openvswitch
          image: noiro/openvswitch:master-test
          imagePullPolicy: Always
          resources:
            limits:
              memory: "1Gi"
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
                - SYS_NICE
                - IPC_LOCK
          env:
            - name: OVS_RUNDIR
              value: /usr/local/var/run/openvswitch
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: hostetc
              mountPath: /usr/local/etc
            - name: hostmodules
              mountPath: /lib/modules
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/liveness-ovs.sh
      restartPolicy: Always
      volumes:
        - name: hostetc
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: hostmodules
          hostPath:
            path: /lib/modules
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aci-containers-controller
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
    name: aci-containers-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: aci-containers-controller
      network-plugin: aci-containers
  template:
    metadata:
      name: aci-containers-controller
      namespace: aci-containers-system
      labels:
        name: aci-containers-controller
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      serviceAccountName: aci-containers-controller
      tolerations:
        - operator: Exists
          effect: NoSchedule
      priorityClassName: system-node-critical
      containers:
        - name: aci-containers-controller
          image: noiro/aci-containers-controller:master-test
          imagePullPolicy: Always
          env:
            - name: WATCH_NAMESPACE
              value: ""
            - name: ACI_SNAT_NAMESPACE
              value: "aci-containers-system"
            - name: ACI_SNAGLOBALINFO_NAME
              value: "snatglobalinfo"
            - name: ACI_RDCONFIG_NAME
              value: "routingdomain-config"
            - name: SYSTEM_NAMESPACE
              value: "aci-containers-system"
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          livenessProbe:
            httpGet:
              path: /status
              port: 8091
      volumes:
        - name: aci-user-cert-volume
          secret:
            secretName: aci-user-cert
        - name: controller-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: controller-config
                path: controller.conf
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-operator
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
  name: aci-containers-operator
rules:
- apiGroups:
  - '*'
  resources:
  - '*'
  verbs:
  - '*'
- nonResourceURLs:
  - '*'
  verbs:
  - '*'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers-operator
  labels:
    aci-containers-config-version: "dummy"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers-operator
subjects:
- kind: ServiceAccount
  name: aci-containers-operator
  namespace: aci-containers-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aci-containers-operator
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    name: aci-containers-operator
    network-plugin: aci-containers
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      name: aci-containers-operator
      network-plugin: aci-containers
  strategy:
    type: Recreate
  template:
    metadata:
      name: aci-containers-operator
      namespace: aci-containers-system
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        name: aci-containers-operator
        network-plugin: aci-containers
    spec:
      containers:
      - image: noiro/aci-containers-operator:master-test
        imagePullPolicy: Always
        name: aci-containers-operator
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: aci-operator-config
          mountPath: /usr/local/etc/aci-containers/
        env:
        - name: SYSTEM_NAMESPACE
          value: "aci-containers-system"
      dnsPolicy: ClusterFirst
      hostNetwork: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: aci-containers-operator
      serviceAccountName: aci-containers-operator
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        operator: Exists
      volumes:
      - name: aci-operator-config
        configMap:
          name: aci-operator-config
          items:
            - key: spec
              path: aci-operator.conf
