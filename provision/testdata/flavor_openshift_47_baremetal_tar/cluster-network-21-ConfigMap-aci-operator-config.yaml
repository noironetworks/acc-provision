apiVersion: v1
data:
  spec: "{\n    \"flavor\": \"openshift-4.7-baremetal\",\n    \"config\": \"
apiVersion: v1
kind: Namespace
metadata:
  name: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
    openshift.io/run-level: "0"
  annotations:
    openshift.io/node-selector: ''
---
apiVersion: scheduling.k8s.io/v1beta1
kind: PriorityClass
metadata:
  name: acicni-priority
value: 1000000000
globalDefault: false
description: "This priority class is used for ACI-CNI resources"
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: nodepodifs.aci.aw
spec:
  group: aci.aw
  names:
    kind: NodePodIF
    listKind: NodePodIFList
    plural: nodepodifs
    singular: nodepodif
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            properties:
              podifs:
                type: array
                items:
                  type: object
                  properties:
                    containerID:
                      type: string
                    epg:
                      type: string
                    ifname:
                      type: string
                    ipaddr:
                      type: string
                    macaddr:
                      type: string
                    podname:
                      type: string
                    podns:
                      type: string
                    vtep:
                      type: string
        required:
        - spec
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: snatglobalinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatGlobalInfo
    listKind: SnatGlobalInfoList
    plural: snatglobalinfos
    singular: snatglobalinfo
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        description: SnatGlobalInfo is the Schema for the snatglobalinfos API
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              globalInfos:
                additionalProperties:
                  items:
                    properties:
                      macAddress:
                        type: string
                      portRanges:
                        items:
                          properties:
                            end:
                              maximum: 65535
                              minimum: 1
                              type: integer
                            start:
                              maximum: 65535
                              minimum: 1
                              type: integer
                          type: object
                        type: array
                      snatIp:
                        type: string
                      snatIpUid:
                        type: string
                      snatPolicyName:
                        type: string
                    required:
                    - macAddress
                    - portRanges
                    - snatIp
                    - snatIpUid
                    - snatPolicyName
                    type: object
                  type: array
                type: object
            required:
            - globalInfos
            type: object
          status:
            description: SnatGlobalInfoStatus defines the observed state of SnatGlobalInfo
            type: object
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: snatlocalinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatLocalInfo
    listKind: SnatLocalInfoList
    plural: snatlocalinfos
    singular: snatlocalinfo
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            description: SnatLocalInfoSpec defines the desired state of SnatLocalInfo
            properties:
              localInfos:
                items:
                  properties:
                    podName:
                      type: string
                    podNamespace:
                      type: string
                    podUid:
                      type: string
                    snatPolicies:
                      items:
                        properties:
                          destIp:
                            items:
                              type: string
                            type: array
                          name:
                            type: string
                          snatIp:
                            type: string
                        required:
                        - destIp
                        - name
                        - snatIp
                        type: object
                      type: array
                  required:
                  - podName
                  - podNamespace
                  - podUid
                  - snatPolicies
                  type: object
                type: array
            required:
            - localInfos
            type: object
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: snatpolicies.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatPolicy
    listKind: SnatPolicyList
    plural: snatpolicies
    singular: snatpolicy
  scope: Cluster
  versions:
  - name: v1
    served: true
    storage: true
    subresources:
      status: {}
    schema:
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            properties:
              selector:
                type: object
                properties:
                  labels:
                    type: object
                    description: 'Selection of Pods'
                    properties:
                    additionalProperties:
                      type: string
                  namespace:
                    type: string
                type: object
              snatIp:
                type: array
                items:
                  type: string
              destIp:
                type: array
                items:
                  type: string
            type: object
          status:
            type: object
            properties:
            additionalProperties:
              type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: nodeinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: NodeInfo
    listKind: NodeInfoList
    plural: nodeinfos
    singular: nodeinfo
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              macaddress:
                type: string
              snatpolicynames:
                additionalProperties:
                  type: boolean
                type: object
            type: object
          status:
            description: NodeinfoStatus defines the observed state of Nodeinfo
            type: object
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: rdconfigs.aci.snat
spec:
  group: aci.snat
  names:
    kind: RdConfig
    listKind: RdConfigList
    plural: rdconfigs
    singular: rdconfig
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              discoveredsubnets:
                items:
                  type: string
                type: array
              usersubnets:
                items:
                  type: string
                type: array
            type: object
          status:
            description: NodeinfoStatus defines the observed state of Nodeinfo
            type: object
        type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: networkpolicies.aci.netpol
spec:
  group: aci.netpol
  names:
    kind: NetworkPolicy
    listKind: NetworkPolicyList
    plural: networkpolicies
    singular: networkpolicy
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: Network Policy describes traffic flow at IP address or port level
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              appliedTo:
                properties:
                  namespaceSelector:
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              type: string
                            values:
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  podSelector:
                    description: allow ingress from the same namespace
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              type: string
                            values:
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                type: object
              egress:
                description: Set of egress rules evaluated based on the order in which they are set.
                items:
                  properties:
                    action:
                      description: Action specifies the action to be applied on the rule.
                      type: string
                    enableLogging:
                      description: EnableLogging is used to indicate if agent should generate logs default to false.
                      type: boolean
                    ports:
                      description: Set of port and protocol allowed/denied by the rule. If this field is unset or empty, this rule matches all ports.
                      items:
                        description: NetworkPolicyPort describes the port and protocol to match in a rule.
                        properties:
                          endPort:
                            description: EndPort defines the end of the port range, being the end included within the range. It can only be specified when a numerical `port` is specified.
                            format: int32
                            type: integer
                          port:
                            anyOf:
                            - type: integer
                            - type: string
                            description: The port on the given protocol. This can be either a numerical or named port on a Pod. If this field is not provided, this matches all port names and numbers.
                            x-kubernetes-int-or-string: true
                          protocol:
                            default: TCP
                            description: The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
                            type: string
                        type: object
                      type: array
                    to:
                      description: Rule is matched if traffic is intended for workloads selected by this field. If this field is empty or missing, this rule matches all destinations.
                      items:
                        properties:
                          ipBlock:
                            description: IPBlock describes the IPAddresses/IPBlocks that is matched in to/from. IPBlock cannot be set as part of the AppliedTo field. Cannot be set with any other selector.
                            properties:
                              cidr:
                                description: CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
                                type: string
                              except:
                                description: Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
                                items:
                                  type: string
                                type: array
                            required:
                            - cidr
                            type: object
                          namespaceSelector:
                            description: Select all Pods from Namespaces matched by this selector, as workloads in To/From fields. If set with PodSelector, Pods are matched from Namespaces matched by the NamespaceSelector. Cannot be set with any other selector except PodSelector or ExternalEntitySelector.
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                          podSelector:
                            description: Select Pods from NetworkPolicy's Namespace as workloads in AppliedTo/To/From fields. If set with NamespaceSelector, Pods are matched from Namespaces matched by the NamespaceSelector. Cannot be set with any other selector except NamespaceSelector.
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                        type: object
                      type: array
                    toFqDn:
                      properties:
                        matchNames:
                          items:
                            type: string
                          type: array
                      required:
                      - matchNames
                      type: object
                  required:
                  - enableLogging
                  - toFqDn
                  type: object
                type: array
              ingress:
                description: Set of ingress rules evaluated based on the order in which they are set.
                items:
                  properties:
                    action:
                      description: Action specifies the action to be applied on the rule.
                      type: string
                    enableLogging:
                      description: EnableLogging is used to indicate if agent should generate logs when rules are matched. Should be default to false.
                      type: boolean
                    from:
                      description: Rule is matched if traffic originates from workloads selected by this field. If this field is empty, this rule matches all sources.
                      items:
                        properties:
                          ipBlock:
                            description: IPBlock describes the IPAddresses/IPBlocks that is matched in to/from. IPBlock cannot be set as part of the AppliedTo field. Cannot be set with any other selector.
                            properties:
                              cidr:
                                description: CIDR is a string representing the IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64"
                                type: string
                              except:
                                description: Except is a slice of CIDRs that should not be included within an IP Block Valid examples are "192.168.1.1/24" or "2001:db9::/64" Except values will be rejected if they are outside the CIDR range
                                items:
                                  type: string
                                type: array
                            required:
                            - cidr
                            type: object
                          namespaceSelector:
                            properties:
                              matchExpressions:
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                          podSelector:
                            description: Select Pods from NetworkPolicy's Namespace as workloads in AppliedTo/To/From fields. If set with NamespaceSelector, Pods are matched from Namespaces matched by the NamespaceSelector. Cannot be set with any other selector except NamespaceSelector.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                items:
                                  properties:
                                    key:
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                type: object
                            type: object
                        type: object
                      type: array
                    ports:
                      description: Set of port and protocol allowed/denied by the rule. If this field is unset or empty, this rule matches all ports.
                      items:
                        description: NetworkPolicyPort describes the port and protocol to match in a rule.
                        properties:
                          endPort:
                            description: EndPort defines the end of the port range, being the end included within the range. It can only be specified when a numerical `port` is specified.
                            format: int32
                            type: integer
                          port:
                            anyOf:
                            - type: integer
                            - type: string
                            description: The port on the given protocol. This can be either a numerical or named port on a Pod. If this field is not provided, this matches all port names and numbers.
                            x-kubernetes-int-or-string: true
                          protocol:
                            default: TCP
                            description: The protocol (TCP, UDP, or SCTP) which traffic must match. If not specified, this field defaults to TCP.
                            type: string
                        type: object
                      type: array
                  type: object
                type: array
              policyTypes:
                items:
                  description: Policy Type string describes the NetworkPolicy type This type is beta-level in 1.8
                  type: string
                type: array
              priority:
                description: Priority specfies the order of the NetworkPolicy relative to other NetworkPolicies.
                type: integer
              type:
                description: type of the policy.
                type: string
            required:
            - type
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: dnsnetworkpolicies.aci.dnsnetpol
spec:
  group: aci.dnsnetpol
  names:
    kind: DnsNetworkPolicy
    listKind: DnsNetworkPolicyList
    plural: dnsnetworkpolicies
    singular: dnsnetworkpolicy
  scope: Namespaced
  versions:
  - name: v1beta
    schema:
      openAPIV3Schema:
        description: dns network Policy
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            properties:
              appliedTo:
                properties:
                  namespaceSelector:
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              type: string
                            values:
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  podSelector:
                    description: allow ingress from the same namespace
                    properties:
                      matchExpressions:
                        items:
                          properties:
                            key:
                              type: string
                            operator:
                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                              type: string
                            values:
                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                              items:
                                type: string
                              type: array
                          required:
                          - key
                          - operator
                          type: object
                        type: array
                      matchLabels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                type: object
              egress:
                description: Set of egress rules evaluated based on the order in which they are set.
                properties:
                  toFqdn:
                    properties:
                      matchNames:
                        items:
                          type: string
                        type: array
                    required:
                    - matchNames
                    type: object
                required:
                - toFqdn
                type: object
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: qospolicies.aci.qos
spec:
  group: aci.qos
  names:
    kind: QosPolicy
    listKind: QosPolicyList
    plural: qospolicies
    singular: qospolicy
  scope: Namespaced
  preserveUnknownFields: false
  versions:
  - name: v1
    served: true
    storage: true
    subresources:
      status: {}
    schema:
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            type: object
            properties:
              podSelector:
                description: 'Selection of Pods'
                type: object
                properties:
                  matchLabels:
                    type: object
                    description:
              ingress:
                type: object
                properties:
                  policing_rate:
                    type: integer
                    minimum: 0
                  policing_burst:
                    type: integer
                    minimum: 0
              egress:
                type: object
                properties:
                  policing_rate:
                    type: integer
                    minimum: 0
                  policing_burst:
                    type: integer
                    minimum: 0
              dscpmark:
                type: integer
                default: 0
                minimum: 0
                maximum: 63
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: netflowpolicies.aci.netflow
spec:
  group: aci.netflow
  names:
    kind: NetflowPolicy
    listKind: NetflowPolicyList
    plural: netflowpolicies
    singular: netflowpolicy
  scope: Cluster
  preserveUnknownFields: false
  versions:
  - name: v1alpha
    served: true
    storage: true
    schema:
   # openAPIV3Schema is the schema for validating custom objects.
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            type: object
            properties:
              flowSamplingPolicy:
                type: object
                properties:
                  destIp:
                    type: string
                  destPort:
                    type: integer
                    minimum: 0
                    maximum: 65535
                    default: 2055
                  flowType:
                    type: string
                    enum:
                      - netflow
                      - ipfix
                    default: netflow
                  activeFlowTimeOut:
                    type: integer
                    minimum: 0
                    maximum: 3600
                    default: 60
                  idleFlowTimeOut:
                    type: integer
                    minimum: 0
                    maximum: 600
                    default: 15
                  samplingRate:
                    type: integer
                    minimum: 0
                    maximum: 1000
                    default: 0
                required:
                - destIp
                type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: erspanpolicies.aci.erspan
spec:
  group: aci.erspan
  names:
    kind: ErspanPolicy
    listKind: ErspanPolicyList
    plural: erspanpolicies
    singular: erspanpolicy
  scope: Cluster
  preserveUnknownFields: false
  versions:
  - name: v1alpha
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            type: object
            properties:
              selector:
                type: object
                description: 'Selection of Pods'
                properties:
                  labels:
                    type: object
                    properties:
                    additionalProperties:
                      type: string
                  namespace:
                    type: string
              source:
                type: object
                properties:
                  adminState:
                    description: Administrative state.
                    default: start
                    type: string
                    enum:
                      - start
                      - stop
                  direction:
                    description: Direction of the packets to monitor.
                    default: both
                    type: string
                    enum:
                      - in
                      - out
                      - both
              destination:
                type: object
                properties:
                  destIP:
                    description: Destination IP of the ERSPAN packet.
                    type: string
                  flowID:
                    description: Unique flow ID of the ERSPAN packet.
                    default: 1
                    type: integer
                    minimum: 1
                    maximum: 1023
                required:
                - destIP
                type: object
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: enabledroplogs.aci.droplog
spec:
  group: aci.droplog
  names:
    kind: EnableDropLog
    listKind: EnableDropLogList
    plural: enabledroplogs
    singular: enabledroplog
  scope: Cluster
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
   # openAPIV3Schema is the schema for validating custom objects.
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            description: Defines the desired state of EnableDropLog
            type: object
            properties:
              disableDefaultDropLog:
                description: Disables the default droplog enabled by acc-provision.
                default: false
                type: boolean
              nodeSelector:
                type: object
                description: Drop logging is enabled on nodes selected based on labels
                properties:
                  labels:
                    type: object
                    properties:
                    additionalProperties:
                      type: string
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: prunedroplogs.aci.droplog
spec:
  group: aci.droplog
  names:
    kind: PruneDropLog
    listKind: PruneDropLogList
    plural: prunedroplogs
    singular: prunedroplog
  scope: Cluster
  versions:
  - name: v1alpha1
    served: true
    storage: true
    schema:
   # openAPIV3Schema is the schema for validating custom objects.
      openAPIV3Schema:
        type: object
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          spec:
            description: Defines the desired state of PruneDropLog
            type: object
            properties:
              nodeSelector:
                type: object
                description: Drop logging filters are applied to nodes selected based on labels
                properties:
                  labels:
                    type: object
                    properties:
                    additionalProperties:
                      type: string
              dropLogFilters:
                type: object
                properties:
                  srcIP:
                    type: string
                  destIP:
                    type: string
                  srcMAC:
                    type: string
                  destMAC:
                    type: string
                  srcPort:
                    type: integer
                  destPort:
                    type: integer
                  ipProto:
                    type: integer
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-containers-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
data:
  controller-config: |-
    {
        "flavor": "openshift-4.7-baremetal",
        "log-level": "info",
        "apic-hosts": [
            "10.30.120.100"
        ],
        "apic-username": "kube",
        "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
        "aci-prefix": "kube",
        "aci-vmm-type": "OpenShift",
        "aci-vmm-domain": "kube",
        "aci-vmm-controller": "kube",
        "aci-policy-tenant": "kube",
        "aci-podbd-dn": "uni/tn-kube/BD-kube-pod-bd",
        "aci-nodebd-dn": "uni/tn-kube/BD-kube-node-bd",
        "aci-service-phys-dom": "kube-pdom",
        "aci-service-encap": "vlan-4003",
        "aci-service-monitor-interval": 5,
        "aci-pbr-tracking-non-snat": false,
        "aci-vrf-tenant": "common",
        "aci-vrf-dn": "uni/tn-common/ctx-kube",
        "aci-l3out": "l3out",
        "aci-ext-networks": [
            "default"
        ],
        "aci-vrf": "kube",
        "default-endpoint-group": {
            "policy-space": "kube",
            "name": "kubernetes|kube-default"
        },
        "max-nodes-svc-graph": 32,
        "namespace-default-endpoint-group": {
            "aci-containers-system": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "istio-operator": {
                "policy-space": "kube",
                "name": "kubernetes|kube-istio"
            },
            "istio-system": {
                "policy-space": "kube",
                "name": "kubernetes|kube-istio"
            },
            "kube-service-catalog": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "kube-system": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-authentication": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-authentication-operator": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-console": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-dns": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-monitoring": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-web-console": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            }        },
        "service-ip-pool": [
            {
                "end": "10.3.0.254",
                "start": "10.3.0.2"
            }
        ],
        "extern-dynamic": ["10.3.0.1/24"],
        "snat-contract-scope": "global",
        "static-service-ip-pool": [],
        "pod-ip-pool": [
            {
                "end": "10.2.255.254",
                "start": "10.2.0.2"
            }
        ],
        "pod-subnet-chunk-size": 32,
        "node-service-ip-pool": [
            {
                "end": "10.5.0.254",
                "start": "10.5.0.2"
            }
        ],
        "node-service-subnets": [
            "10.5.0.1/24"
        ]
    }
  host-agent-config: |-
    {
        "flavor": "openshift-4.7-baremetal",
        "app-profile": "kubernetes",
        "opflex-mode": null,
        "log-level": "info",
        "aci-snat-namespace": "aci-containers-system",
        "aci-vmm-type": "OpenShift",
        "aci-vmm-domain": "kube",
        "aci-vmm-controller": "kube",
        "installer-provisioned-lb-ip": "192.168.18.201",
        "aci-prefix": "kube",
        "aci-vrf": "kube",
        "aci-vrf-tenant": "common",
        "service-vlan": 4003,
        "kubeapi-vlan": 4001,
        "pod-subnet": [
            "10.2.0.1/16"
        ],
        "node-subnet": [
            "10.1.0.1/16"
        ],
        "encap-type": "vxlan",
        "aci-infra-vlan": 4093,
        "cni-netconfig": [
            {
                "gateway": "10.2.0.1",
                "routes": [
                    {
                        "dst": "0.0.0.0/0",
                        "gw": "10.2.0.1"
                    }
                ],
                "subnet": "10.2.0.0/16"
            }
        ],
        "default-endpoint-group": {
            "policy-space": "kube",
            "name": "kubernetes|kube-default"
        },
        "namespace-default-endpoint-group": {
            "aci-containers-system": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "istio-operator": {
                "policy-space": "kube",
                "name": "kubernetes|kube-istio"
            },
            "istio-system": {
                "policy-space": "kube",
                "name": "kubernetes|kube-istio"
            },
            "kube-service-catalog": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "kube-system": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-authentication": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-authentication-operator": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-console": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-dns": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-monitoring": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            },
            "openshift-web-console": {
                "policy-space": "kube",
                "name": "kubernetes|kube-system"
            }        },
        "enable-drop-log": true,
        "enable-nodepodif": false,
        "enable-ovs-hw-offload": false
    }
  opflex-agent-config: |-
    {
        "log": {
            "level": "info"
        },
        "opflex": {
            "notif" : { "enabled" : "false" },
            "asyncjson": { "enabled" : "false" }
        },
        "ovs": {
            "asyncjson": { "enabled" : "false" }
        },
        "prometheus": {
            "enabled": "false"
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: snat-operator-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
data:
    "start": "5000"
    "end": "65000"
    "ports-per-node": "3000"
---
apiVersion: v1
kind: Secret
metadata:
  name: aci-user-cert
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
data:
  user.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUNkZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQW1Bd2dnSmNBZ0VBQW9HQkFOcitBK2dPS2JBVlZySnMKYjMrWldiY25WWG8vZ2R1eElUa3ZtMDlrZWlGQ24rVXAvU0dkcXY2QWgramxKZkY3dXYrRmdDSnRDeEQ4N3FZdwowcTVEY0dWTEljZkY0WlViOUI4ckpXS0JJNndKZnh0TWZGdVVOWTI0Y2d3UXBKcXJNVXFBRHovTVcrd3JaZWhzClNuRnN5ZXdYUjM4OGVSN0VLakRXZWdkSnlQY1hBZ01CQUFFQ2dZQjlBWGIxWmZCQ0JVeEIrVWdFVEdNNys0WDkKakhieUUwQmx4bGtmanJsd2R2bVM5TTc3KzJaNmRLQWdQMzNUUk0vUHdFTU9ZN1JuZEJvK1g2eERzVmRjVEpJeQo1Vnc4eFVabHIrYXVFT2xzMlpuWngxMWU1emg3c1UzTmo1SzM1QldSOUdUWEo2UE1kcFQ0OWxCOWJsbE1qRHJMCjcrNWJDc2R1NjNPOEthTjlZUUpCQVBHTWJwSHBGc3RDMWNXR3BSUXgzaXdGK1pMWUFyQVViQ0tiV1FmYmlaVHAKQ1M4RGdPbXlVN3VLVFJLaUMrMlJZVFMzcHJMVjU3R3ZmZkZ4SmpUd0d5a0NRUURvR0J3ZjVpT3N5dU1RTno3SwpSaXJiRDBKN1I2WWVRa0paK3BDZUt3eStOeUlxeGgwTEJEbUJ5bVNLdlgwV0VLQ2l0T2dwaTMyRldCb3FIamYzCk1RZy9Ba0JMQkxScWVKdnRzT28zbUtPNGEreDJlN3lSVUtrMUNvS3pGTkJIMG5VZVhHblB3aVROYitiMWZmU0YKN3ZJSmJIZG1LZ3VKeTBsVU5BN0haNzdYL2lKUkFrQWpuYmVMS1p6bDRraVA3M3BpUGZ4TG0zN2ZQakoreURvNApacHdVdVpSK0NDWGxISHZPZWZwOU1WcldjNWVqY0MvR2FDNk1XWXlNanVXTSt4QXBqY3V2QWtFQXpZK3AxNDBDCnh3cHI5NWxpbm52V2NDN043MDhBSkZpbTMvRlUxMEdEbzc3eUlPSTVoKzUzN0piWWRtNTU1aE9lSC9LalNla2gKRUY0TW14UlBtaXQ5OXc9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  user.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI2RENDQVZFQ0FnUG9NQTBHQ1NxR1NJYjNEUUVCQlFVQU1Ed3hDekFKQmdOVkJBWVRBbFZUTVJZd0ZBWUQKVlFRS0RBMURhWE5qYnlCVGVYTjBaVzF6TVJVd0V3WURWUVFEREF4VmMyVnlJRzFoYm1SbFpYQXdIaGNOTVRjdwpOVEUyTWpFeU9UTXdXaGNOTWpjd05URTBNakV5T1RNd1dqQThNUXN3Q1FZRFZRUUdFd0pWVXpFV01CUUdBMVVFCkNnd05RMmx6WTI4Z1UzbHpkR1Z0Y3pFVk1CTUdBMVVFQXd3TVZYTmxjaUJ0WVc1a1pXVndNSUdmTUEwR0NTcUcKU0liM0RRRUJBUVVBQTRHTkFEQ0JpUUtCZ1FEYS9nUG9EaW13RlZheWJHOS9tVm0zSjFWNlA0SGJzU0U1TDV0UApaSG9oUXAvbEtmMGhuYXIrZ0lmbzVTWHhlN3IvaFlBaWJRc1EvTzZtTU5LdVEzQmxTeUhIeGVHVkcvUWZLeVZpCmdTT3NDWDhiVEh4YmxEV051SElNRUtTYXF6RktnQTgvekZ2c0syWG9iRXB4Yk1uc0YwZC9QSGtleENvdzFub0gKU2NqM0Z3SURBUUFCTUEwR0NTcUdTSWIzRFFFQkJRVUFBNEdCQUhYK2tMVGU2TENBQmV3bUNUdk1zanVzSGRwWgpraTAxK25RN0tobkVSYkJtL3RaNXNjWkU0Y3RJcWNoM255MUVJVEhOdFlXS0JONENkVUtjanZEVzJoMnZrSGVnCnJ0WWJWK0FhRXNxMG00dkdGOUVtdnQxY3A5WTQxSXlNQlpZcXc4Yy9WMUF0bVJRY1JUWVFBOEgzT0ZEY2h5QjIKMEpIU0RuQm9TN2ZmU2JCeAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-controller
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-host-agent
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
  name: aci-containers-controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  - events
  - replicationcontrollers
  - serviceaccounts
  verbs:
  - list
  - watch
  - get
  - patch
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
  - clusterroles
  - clusterrolebindings
  verbs:
  - '*'
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  - daemonsets
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - nodes
  - services/status
  verbs:
  - update
- apiGroups:
  - "monitoring.coreos.com"
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies/finalizers
  - snatpolicies/status
  - nodeinfos
  verbs:
  - update
  - create
  - list
  - watch
  - get
  - delete
- apiGroups:
  - "aci.snat"
  resources:
  - snatglobalinfos
  - snatpolicies
  - nodeinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - "aci.qos"
  resources:
  - qospolicies
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
  - patch
- apiGroups:
  - "aci.netflow"
  resources:
  - netflowpolicies
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - "aci.erspan"
  resources:
  - erspanpolicies
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - "aci.aw"
  resources:
  - nodepodifs
  verbs:
  - '*'
- apiGroups:
  - apps.openshift.io
  resources:
  - deploymentconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "aci.netpol"
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
- apiGroups:
  - "aci.dnsnetpol"
  resources:
  - dnsnetworkpolicies
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
  name: aci-containers-host-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  - replicationcontrollers
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies
  - snatglobalinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.qos"
  resources:
  - qospolicies
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
  - patch
- apiGroups:
  - "aci.droplog"
  resources:
  - enabledroplogs
  - prunedroplogs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - nodeinfos
  - snatlocalinfos
  verbs:
  - create
  - update
  - list
  - watch
  - get
  - delete
- apiGroups:
  - "config.openshift.io"
  resources:
  - infrastructures
  verbs:
  - get
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "aci.netpol"
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - "aci.aw"
  resources:
  - nodepodifs
  verbs:
  - "*"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers-controller
  labels:
    aci-containers-config-version: "dummy"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers-controller
subjects:
- kind: ServiceAccount
  name: aci-containers-controller
  namespace: aci-containers-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers-host-agent
  labels:
    aci-containers-config-version: "dummy"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers-host-agent
subjects:
- kind: ServiceAccount
  name: aci-containers-host-agent
  namespace: aci-containers-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aci-containers-host
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-host
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-host
        network-plugin: aci-containers
      annotations:
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - operator: Exists
      initContainers:
        - name: cnideploy
          image: noiro/cnideploy:6.0.0.0.0ef4718
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
      priorityClassName: acicni-priority
      containers:
        - name: aci-containers-host
          image: noiro/aci-containers-host:6.0.0.0.0ef4718
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
                - SYS_PTRACE
                - NET_RAW
          env:
            - name: GOTRACEBACK
              value: "2"
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TENANT
              value: "kube"
            - name: NODE_EPG
              value: "kubernetes|kube-nodes"
            - name: DURATION_WAIT_FOR_NETWORK
              value: "210"
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
            - name: cni-conf
              mountPath: /mnt/cni-conf
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: host-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - mountPath: /run/netns
              name: host-run-netns
              readOnly: true
              mountPropagation: HostToContainer
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /status
              port: 8090
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 30
        - name: opflex-agent
          env:
            - name: REBOOT_WITH_OVS
              value: "true"
          image: noiro/opflex:6.0.0.0.d2739da
          imagePullPolicy: Always
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: opflex-config-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/conf.d
        - name: mcast-daemon
          image: noiro/opflex:6.0.0.0.d2739da
          command: ["/bin/sh"]
          args: ["/usr/local/bin/launch-mcastdaemon.sh"]
          imagePullPolicy: Always
          securityContext:
            privileged: true
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
      restartPolicy: Always
      volumes:
        - name: cni-bin
          hostPath:
            path: /var/lib
        - name: cni-conf
          hostPath:
            path: /etc/kubernetes
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: host-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: host-agent-config
                path: host-agent.conf
        - name: opflex-hostconfig-volume
          emptyDir:
            medium: Memory
        - name: opflex-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: opflex-agent-config
                path: local.conf
        - name: host-run-netns
          hostPath:
            path: /run/netns
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aci-containers-openvswitch
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-openvswitch
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-openvswitch
        network-plugin: aci-containers
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - operator: Exists
      priorityClassName: acicni-priority
      containers:
        - name: aci-containers-openvswitch
          image: noiro/openvswitch:6.0.0.0.5681a9b
          imagePullPolicy: Always
          resources:
            limits:
              memory: "1Gi"
            requests:
              memory: "128Mi"
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
                - SYS_NICE
                - IPC_LOCK
          env:
            - name: OVS_RUNDIR
              value: /usr/local/var/run/openvswitch
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: hostetc
              mountPath: /usr/local/etc
            - name: hostmodules
              mountPath: /lib/modules
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/liveness-ovs.sh
      restartPolicy: Always
      volumes:
        - name: hostetc
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: hostmodules
          hostPath:
            path: /lib/modules
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aci-containers-controller
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
    name: aci-containers-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: aci-containers-controller
      network-plugin: aci-containers
  template:
    metadata:
      name: aci-containers-controller
      namespace: aci-containers-system
      labels:
        name: aci-containers-controller
        network-plugin: aci-containers
    spec:
      hostNetwork: true
      serviceAccountName: aci-containers-controller
      tolerations:
        - effect: NoExecute
          operator: Exists
          tolerationSeconds: 60
        - effect: NoSchedule
          key: node.kubernetes.io/not-ready
          operator: Exists
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Exists
      priorityClassName: acicni-priority
      containers:
        - name: aci-containers-controller
          image: noiro/aci-containers-controller:6.0.0.0.0ef4718
          imagePullPolicy: Always
          env:
            - name: WATCH_NAMESPACE
              value: ""
            - name: ACI_SNAT_NAMESPACE
              value: "aci-containers-system"
            - name: ACI_SNAGLOBALINFO_NAME
              value: "snatglobalinfo"
            - name: ACI_RDCONFIG_NAME
              value: "routingdomain-config"
            - name: SYSTEM_NAMESPACE
              value: "aci-containers-system"
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /status
              port: 8091
              scheme: HTTP
            initialDelaySeconds: 120
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 30
      volumes:
        - name: aci-user-cert-volume
          secret:
            secretName: aci-user-cert
        - name: controller-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: controller-config
                path: controller.conf
---
apiVersion: v1
kind: LimitRange
metadata:
  name: memory-limit-range
  namespace: aci-containers-system
spec:
  limits:
  - default:
      memory: 3Gi
    defaultRequest:
      memory: 128Mi
    type: Container
\"\
    \n}"
kind: ConfigMap
metadata:
  labels:
    aci-containers-config-version: dummy
    network-plugin: aci-containers
  name: aci-operator-config
  namespace: aci-containers-system
