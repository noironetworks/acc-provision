apiVersion: v1
data:
  spec: "{\n    \"flavor\": \"cloud\",\n    \"config\": \"CmFwaVZlcnNpb246IHYxCmtpbmQ6IE5hbWVzcGFjZQptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogImR1bW15IgogICAgbmV0d29yay1wbHVnaW46IGFjaS1jb250YWluZXJzCiAgICBvcGVuc2hpZnQuaW8vcnVuLWxldmVsOiAiMCIKICBhbm5vdGF0aW9uczoKICAgIG9wZW5zaGlmdC5pby9ub2RlLXNlbGVjdG9yOiAnJwotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogZXBncy5hY2kuYXcKc3BlYzoKICBncm91cDogYWNpLmF3CiAgbmFtZXM6CiAgICBraW5kOiBFcGcKICAgIGxpc3RLaW5kOiBFcGdMaXN0CiAgICBwbHVyYWw6IGVwZ3MKICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBjb250cmFjdHMuYWNpLmF3CnNwZWM6CiAgZ3JvdXA6IGFjaS5hdwogIG5hbWVzOgogICAga2luZDogQ29udHJhY3QKICAgIGxpc3RLaW5kOiBDb250cmFjdExpc3QKICAgIHBsdXJhbDogY29udHJhY3RzCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MQotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogZ2Jwc3N0YXRlcy5hY2kuYXcKc3BlYzoKICBncm91cDogYWNpLmF3CiAgbmFtZXM6CiAgICBraW5kOiBHQlBTU3RhdGUKICAgIGxpc3RLaW5kOiBHQlBTU3RhdGVMaXN0CiAgICBwbHVyYWw6IGdicHNzdGF0ZXMKICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxCiAgc3VicmVzb3VyY2VzOgogICAgc3RhdHVzOiB7fQotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogcG9kaWZzLmFjaS5hdwpzcGVjOgogIGdyb3VwOiBhY2kuYXcKICBuYW1lczoKICAgIGtpbmQ6IFBvZElGCiAgICBsaXN0S2luZDogUG9kSUZMaXN0CiAgICBwbHVyYWw6IHBvZGlmcwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjEKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHNuYXRnbG9iYWxpbmZvcy5hY2kuc25hdApzcGVjOgogIGdyb3VwOiBhY2kuc25hdAogIG5hbWVzOgogICAga2luZDogU25hdEdsb2JhbEluZm8KICAgIGxpc3RLaW5kOiBTbmF0R2xvYmFsSW5mb0xpc3QKICAgIHBsdXJhbDogc25hdGdsb2JhbGluZm9zCiAgICBzaW5ndWxhcjogc25hdGdsb2JhbGluZm8KICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb246IHYxCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBzbmF0bG9jYWxpbmZvcy5hY2kuc25hdApzcGVjOgogIGdyb3VwOiBhY2kuc25hdAogIG5hbWVzOgogICAga2luZDogU25hdExvY2FsSW5mbwogICAgbGlzdEtpbmQ6IFNuYXRMb2NhbEluZm9MaXN0CiAgICBwbHVyYWw6IHNuYXRsb2NhbGluZm9zCiAgICBzaW5ndWxhcjogc25hdGxvY2FsaW5mbwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjEKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHNuYXRwb2xpY2llcy5hY2kuc25hdApzcGVjOgogIGdyb3VwOiBhY2kuc25hdAogIG5hbWVzOgogICAga2luZDogU25hdFBvbGljeQogICAgbGlzdEtpbmQ6IFNuYXRQb2xpY3lMaXN0CiAgICBwbHVyYWw6IHNuYXRwb2xpY2llcwogICAgc2luZ3VsYXI6IHNuYXRwb2xpY3kKICBzY29wZTogQ2x1c3RlcgogIHN1YnJlc291cmNlczoKICAgIHN0YXR1czoge30KICB2YWxpZGF0aW9uOgogICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uCiAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzJwogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAga2luZDoKICAgICAgICAgIGRlc2NyaXB0aW9uOiAnS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcwogICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgIHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzJwogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICBzcGVjOgogICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgc2VsZWN0b3I6CiAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgIGxhYmVsczoKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgIG5hbWVzcGFjZToKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgIHNuYXRJcDoKICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICBkZXN0SXA6CiAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgIHR5cGU6IG9iamVjdAogIHZlcnNpb246IHYxCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MQogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBub2RlaW5mb3MuYWNpLnNuYXQKc3BlYzoKICBncm91cDogYWNpLnNuYXQKICBuYW1lczoKICAgIGtpbmQ6IE5vZGVJbmZvCiAgICBsaXN0S2luZDogTm9kZUluZm9MaXN0CiAgICBwbHVyYWw6IG5vZGVpbmZvcwogICAgc2luZ3VsYXI6IG5vZGVpbmZvCiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2ZXJzaW9uOiB2MQogIHZlcnNpb25zOgogIC0gbmFtZTogdjEKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogcmRjb25maWdzLmFjaS5zbmF0CnNwZWM6CiAgZ3JvdXA6IGFjaS5zbmF0CiAgbmFtZXM6CiAgICBraW5kOiBSZENvbmZpZwogICAgbGlzdEtpbmQ6IFJkQ29uZmlnTGlzdAogICAgcGx1cmFsOiByZGNvbmZpZ3MKICAgIHNpbmd1bGFyOiByZGNvbmZpZwogIHNjb3BlOiBOYW1lc3BhY2VkCiAgdmVyc2lvbjogdjEKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IHFvc3BvbGljaWVzLmFjaS5xb3MKc3BlYzoKICBncm91cDogYWNpLnFvcwogIHZlcnNpb246IHYxCiAgbmFtZXM6CiAgICBraW5kOiBRb3NQb2xpY3kKICAgIGxpc3RLaW5kOiBRb3NQb2xpY3lMaXN0CiAgICBwbHVyYWw6IHFvc3BvbGljaWVzCiAgICBzaW5ndWxhcjogcW9zcG9saWN5CiAgc2NvcGU6IE5hbWVzcGFjZWQKICB2YWxpZGF0aW9uOgogICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICBwcm9wZXJ0aWVzOgogICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBraW5kOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgc3BlYzoKICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgIHBvZFNlbGVjdG9yOgogICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnU2VsZWN0aW9uIG9mIFBvZHMnCiAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgIG1hdGNoTGFiZWxzOgogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246CiAgICAgICAgICAgIGluZ3Jlc3M6CiAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgIHBvbGljaW5nX3JhdGU6CiAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgICAgICAgcG9saWNpbmdfYnVyc3Q6CiAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgICBlZ3Jlc3M6CiAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgIHBvbGljaW5nX3JhdGU6CiAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgICAgICAgcG9saWNpbmdfYnVyc3Q6CiAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgbWluaW11bTogMAogICAgICAgICAgICBkc2NwbWFyazoKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgZHNjcF9tYXJraW5nOgogICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgICAgICAgbWF4aW11bTogNTYKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IG5ldGZsb3dwb2xpY2llcy5hY2kubmV0ZmxvdwpzcGVjOgogIGdyb3VwOiBhY2kubmV0ZmxvdwogIHZlcnNpb246IHYxYWxwaGEKICBuYW1lczoKICAgIGtpbmQ6IE5ldGZsb3dQb2xpY3kKICAgIGxpc3RLaW5kOiBOZXRmbG93UG9saWN5TGlzdAogICAgcGx1cmFsOiBuZXRmbG93cG9saWNpZXMKICAgIHNpbmd1bGFyOiBuZXRmbG93cG9saWN5CiAgc2NvcGU6IENsdXN0ZXIKICB2YWxpZGF0aW9uOgogICAjIG9wZW5BUElWM1NjaGVtYSBpcyB0aGUgc2NoZW1hIGZvciB2YWxpZGF0aW5nIGN1c3RvbSBvYmplY3RzLgogICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICB0eXBlOiBvYmplY3QKICAgICAgcHJvcGVydGllczoKICAgICAgICBhcGlWZXJzaW9uOgogICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAga2luZDoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHNwZWM6CiAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgIGZsb3dTYW1wbGluZ1BvbGljeToKICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgZGVzdElwOgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgIGRlc3RQb3J0OgogICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgICAgICAgbWF4aW11bTogNjU1MzUKICAgICAgICAgICAgICAgIGZsb3dUeXBlOgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgICAgICAtIG5ldGZsb3cKICAgICAgICAgICAgICAgICAgICAtIGlwZml4CiAgICAgICAgICAgICAgICBhY3RpdmVGbG93VGltZU91dDoKICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgICAgIG1heGltdW06IDM2MDAKICAgICAgICAgICAgICAgIGlkbGVGbG93VGltZU91dDoKICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICBtaW5pbXVtOiAwCiAgICAgICAgICAgICAgICAgIG1heGltdW06IDYwMAogICAgICAgICAgICAgICAgc2FtcGxpbmdSYXRlOgogICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgICAgICAgbWF4aW11bTogMTAwMAogIHZlcnNpb25zOgogIC0gbmFtZTogdjFhbHBoYQogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBlcnNwYW5wb2xpY2llcy5hY2kuZXJzcGFuCnNwZWM6CiAgZ3JvdXA6IGFjaS5lcnNwYW4KICB2ZXJzaW9uOiB2MWFscGhhCiAgbmFtZXM6CiAgICBraW5kOiBFcnNwYW5Qb2xpY3kKICAgIGxpc3RLaW5kOiBFcnNwYW5Qb2xpY3lMaXN0CiAgICBwbHVyYWw6IGVyc3BhbnBvbGljaWVzCiAgICBzaW5ndWxhcjogZXJzcGFucG9saWN5CiAgc2NvcGU6IENsdXN0ZXIKICB2YWxpZGF0aW9uOgogICAgb3BlbkFQSVYzU2NoZW1hOgogICAgIyBvcGVuQVBJVjNTY2hlbWEgaXMgdGhlIHNjaGVtYSBmb3IgdmFsaWRhdGluZyBjdXN0b20gb2JqZWN0cy4KICAgICAgdHlwZTogb2JqZWN0CiAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIGtpbmQ6CiAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICBzcGVjOgogICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICBwb2RTZWxlY3RvcjoKICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NlbGVjdGlvbiBvZiBQb2RzJwogICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICBtYXRjaExhYmVsczoKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOgogICAgICAgICAgICBzb3VyY2U6CiAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgIGFkbWluX3N0YXRlOgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgZW51bToKICAgICAgICAgICAgICAgICAgICAtIHN0YXJ0CiAgICAgICAgICAgICAgICAgICAgLSBzdG9wCiAgICAgICAgICAgICAgICBkaXJlY3Rpb246CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgICAgIC0gaW4KICAgICAgICAgICAgICAgICAgICAtIG91dAogICAgICAgICAgICAgICAgICAgIC0gYm90aAogICAgICAgICAgICAgICAgdGFnOgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgZGVzdGluYXRpb246CiAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgIGRlc3RJcDoKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIG1pbmltdW06IDAKICAgICAgICAgICAgICAgIGZsb3dJZDoKICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICBtaW5pbXVtOiAxCiAgICAgICAgICAgICAgICAgIG1heGltdW06IDEwMjMKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxYWxwaGEKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbmZpZwogIG5hbWVzcGFjZTogYWNpLWNvbnRhaW5lcnMtc3lzdGVtCiAgbGFiZWxzOgogICAgYWNpLWNvbnRhaW5lcnMtY29uZmlnLXZlcnNpb246ICJkdW1teSIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwpkYXRhOgogIGNvbnRyb2xsZXItY29uZmlnOiB8LQogICAgewogICAgICAgICJmbGF2b3IiOiAiY2xvdWQiLAogICAgICAgICJsb2ctbGV2ZWwiOiAiaW5mbyIsCiAgICAgICAgImFwaWMtaG9zdHMiOiBbCiAgICAgICAgICAgICJsb2NhbGhvc3Q6NTAwMDAiCiAgICAgICAgXSwKICAgICAgICAibWF4LWNzci10dW5uZWxzIjogMCwKICAgICAgICAiYXBpYy11c2VybmFtZSI6ICJjbHVzdGVyamoiLAogICAgICAgICJhcGljLXByaXZhdGUta2V5LXBhdGgiOiAiL3Vzci9sb2NhbC9ldGMvYWNpLWNlcnQvdXNlci5rZXkiLAogICAgICAgICJhY2ktcHJlZml4IjogImNsdXN0ZXJqaiIsCiAgICAgICAgImFjaS12bW0tdHlwZSI6ICJLdWJlcm5ldGVzIiwKICAgICAgICAiYWNpLXZtbS1kb21haW4iOiAiY2x1c3RlcmpqIiwKICAgICAgICAiYWNpLXZtbS1jb250cm9sbGVyIjogImNsdXN0ZXJqaiIsCiAgICAgICAgImFjaS1wb2xpY3ktdGVuYW50IjogImNzcnRlc3QiLAogICAgICAgICJhY2ktYXBwLXByb2ZpbGUiOiAiYWNpLWNvbnRhaW5lcnMtY2x1c3RlcmpqIiwKICAgICAgICAibGItdHlwZSI6ICJOb25lIiwKICAgICAgICAiYWNpLXNlcnZpY2UtcGh5cy1kb20iOiAiY2x1c3RlcmpqLXBkb20iLAogICAgICAgICJhY2ktc2VydmljZS1lbmNhcCI6ICJ2bGFuLU5vbmUiLAogICAgICAgICJhY2ktc2VydmljZS1tb25pdG9yLWludGVydmFsIjogNSwKICAgICAgICAiYWNpLXBici10cmFja2luZy1ub24tc25hdCI6IGZhbHNlLAogICAgICAgICJhY2ktdnJmLXRlbmFudCI6ICJjc3J0ZXN0IiwKICAgICAgICAiYWNpLXZyZi1kbiI6ICJ1bmkvdG4tY3NydGVzdC9jdHgtVUxqaiIsCiAgICAgICAgImFjaS1sM291dCI6IG51bGwsCiAgICAgICAgImFjaS1leHQtbmV0d29ya3MiOiBudWxsLAogICAgICAgICJhY2ktdnJmIjogImNsdXN0ZXJqal9vdmVybGF5IiwKICAgICAgICAiZGVmYXVsdC1lbmRwb2ludC1ncm91cCI6IHsKICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJjc3J0ZXN0IiwKICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtZGVmYXVsdCIKICAgICAgICB9LAogICAgICAgICJtYXgtbm9kZXMtc3ZjLWdyYXBoIjogMzIsCiAgICAgICAgIm5hbWVzcGFjZS1kZWZhdWx0LWVuZHBvaW50LWdyb3VwIjogewogICAgICAgICAgICAiYWNpLWNvbnRhaW5lcnMtc3lzdGVtIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJjc3J0ZXN0IiwKICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtZGVmYXVsdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlzdGlvLW9wZXJhdG9yIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJjc3J0ZXN0IiwKICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtZGVmYXVsdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlzdGlvLXN5c3RlbSI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAiY3NydGVzdCIsCiAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLWRlZmF1bHQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJrdWJlLXN5c3RlbSI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAiY3NydGVzdCIsCiAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLWRlZmF1bHQiCiAgICAgICAgICAgIH0gICAgICAgIH0sCiAgICAgICAgInNlcnZpY2UtaXAtcG9vbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImVuZCI6ICIxMC4zLjAuMjU0IiwKICAgICAgICAgICAgICAgICJzdGFydCI6ICIxMC4zLjAuMiIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInNuYXQtY29udHJhY3Qtc2NvcGUiOiAiZ2xvYmFsIiwKICAgICAgICAic3RhdGljLXNlcnZpY2UtaXAtcG9vbCI6IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgImVuZCI6ICIxMC40LjAuMjU0IiwKICAgICAgICAgICAgICAgICJzdGFydCI6ICIxMC40LjAuMiIKICAgICAgICAgICAgfQogICAgICAgIF0sCiAgICAgICAgInBvZC1pcC1wb29sIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiZW5kIjogIjE0LjMuMjU1LjI1NCIsCiAgICAgICAgICAgICAgICAic3RhcnQiOiAiMTQuMy4wLjIiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJwb2Qtc3VibmV0LWNodW5rLXNpemUiOiAzMiwKICAgICAgICAibm9kZS1zZXJ2aWNlLWlwLXBvb2wiOiBbCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICJlbmQiOiAiMTAuNS4wLjI1NCIsCiAgICAgICAgICAgICAgICAic3RhcnQiOiAiMTAuNS4wLjIiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJub2RlLXNlcnZpY2Utc3VibmV0cyI6IFsKICAgICAgICAgICAgIjEwLjUuMC4xLzI0IgogICAgICAgIF0KICAgIH0KICBob3N0LWFnZW50LWNvbmZpZzogfC0KICAgIHsKICAgICAgICAiZmxhdm9yIjogImNsb3VkIiwKICAgICAgICAiYXBwLXByb2ZpbGUiOiAiYWNpLWNvbnRhaW5lcnMtY2x1c3RlcmpqIiwKICAgICAgICAiZXAtcmVnaXN0cnkiOiAiazhzIiwKICAgICAgICAib3BmbGV4LW1vZGUiOiAib3ZlcmxheSIsCiAgICAgICAgImxvZy1sZXZlbCI6ICJpbmZvIiwKICAgICAgICAiYWNpLXNuYXQtbmFtZXNwYWNlIjogImFjaS1jb250YWluZXJzLXN5c3RlbSIsCiAgICAgICAgImFjaS12bW0tdHlwZSI6ICJLdWJlcm5ldGVzIiwKICAgICAgICAiYWNpLXZtbS1kb21haW4iOiAiY2x1c3RlcmpqIiwKICAgICAgICAiYWNpLXZtbS1jb250cm9sbGVyIjogImNsdXN0ZXJqaiIsCiAgICAgICAgImFjaS1wcmVmaXgiOiAiY2x1c3RlcmpqIiwKICAgICAgICAiYWNpLXZyZiI6ICJjbHVzdGVyampfb3ZlcmxheSIsCiAgICAgICAgImFjaS12cmYtdGVuYW50IjogImNzcnRlc3QiLAogICAgICAgICJzZXJ2aWNlLXZsYW4iOiBudWxsLAogICAgICAgICJrdWJlYXBpLXZsYW4iOiBudWxsLAogICAgICAgICJwb2Qtc3VibmV0IjogIjE0LjMuMC4xLzE2IiwKICAgICAgICAibm9kZS1zdWJuZXQiOiAiMzEuMC4xLjAvMjQiLAogICAgICAgICJlbmNhcC10eXBlIjogInZ4bGFuIiwKICAgICAgICAiYWNpLWluZnJhLXZsYW4iOiBudWxsLAogICAgICAgICJjbmktbmV0Y29uZmlnIjogWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAiZ2F0ZXdheSI6ICIxNC4zLjAuMSIsCiAgICAgICAgICAgICAgICAicm91dGVzIjogWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgImRzdCI6ICIwLjAuMC4wLzAiLAogICAgICAgICAgICAgICAgICAgICAgICAiZ3ciOiAiMTQuMy4wLjEiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICJzdWJuZXQiOiAiMTQuMy4wLjAvMTYiCiAgICAgICAgICAgIH0KICAgICAgICBdLAogICAgICAgICJkZWZhdWx0LWVuZHBvaW50LWdyb3VwIjogewogICAgICAgICAgICAicG9saWN5LXNwYWNlIjogImNzcnRlc3QiLAogICAgICAgICAgICAibmFtZSI6ICJhY2ktY29udGFpbmVycy1kZWZhdWx0IgogICAgICAgIH0sCiAgICAgICAgIm5hbWVzcGFjZS1kZWZhdWx0LWVuZHBvaW50LWdyb3VwIjogewogICAgICAgICAgICAiYWNpLWNvbnRhaW5lcnMtc3lzdGVtIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJjc3J0ZXN0IiwKICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtZGVmYXVsdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlzdGlvLW9wZXJhdG9yIjogewogICAgICAgICAgICAgICAgInBvbGljeS1zcGFjZSI6ICJjc3J0ZXN0IiwKICAgICAgICAgICAgIm5hbWUiOiAiYWNpLWNvbnRhaW5lcnMtZGVmYXVsdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgImlzdGlvLXN5c3RlbSI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAiY3NydGVzdCIsCiAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLWRlZmF1bHQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJrdWJlLXN5c3RlbSI6IHsKICAgICAgICAgICAgICAgICJwb2xpY3ktc3BhY2UiOiAiY3NydGVzdCIsCiAgICAgICAgICAgICJuYW1lIjogImFjaS1jb250YWluZXJzLWRlZmF1bHQiCiAgICAgICAgICAgIH0gICAgICAgIH0sCiAgICAgICAgImVuYWJsZS1kcm9wLWxvZyI6IGZhbHNlCiAgICB9CiAgb3BmbGV4LWFnZW50LWNvbmZpZzogfC0KICAgIHsKICAgICAgICAibG9nIjogewogICAgICAgICAgICAibGV2ZWwiOiAiaW5mbyIKICAgICAgICB9LAogICAgICAgICJvcGZsZXgiOiB7CiAgICAgICAgICAgICJzdGF0aXN0aWNzIiA6IHsgIm1vZGUiIDogIm9mZiIgfQogICAgICAgIH0KICAgIH0KICBnYnAtc2VydmVyLWNvbmZpZzogfC0KICAgewogICAgICAgICJhY2ktcG9saWN5LXRlbmFudCI6ICJjc3J0ZXN0IiwKICAgICAgICAiYWNpLXZyZiI6ICJjbHVzdGVyampfb3ZlcmxheSIsCiAgICAgICAgImFjaS12bW0tZG9tYWluIjogImNsdXN0ZXJqaiIsCiAgICAgICAgImNzci1saXN0IjogIiIsCiAgICAgICAgInBvZC1zdWJuZXQiOiAiMTQuMy4wLjEvMTYiLAogICAgICAgICJ2cmYtZW5jYXAtaWQiOiAyNzg1MjgxLAogICAgICAgICJhcGljIjogewogICAgICAgICAgICAiYXBpYy1ob3N0cyI6IFsKICAgICAgICAgICAgImxvY2FsaG9zdDo1MDAwMCIKICAgICAgICBdLAogICAgICAgICAgICAiYXBpYy11c2VybmFtZSI6ICJjbHVzdGVyamoiLAogICAgICAgICAgICAiYXBpYy1wcml2YXRlLWtleS1wYXRoIjogIi91c3IvbG9jYWwvZXRjL2FjaS1jZXJ0L3VzZXIua2V5IiwKICAgICAgICAgICAgImthZmthIjogewogICAgICAgICAgICAgICAgImJyb2tlcnMiOiBbCiAgICAgICAgICAgICAgICAgICAgImxvY2FsaG9zdDo5MDk1IgogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICJjbGllbnQta2V5LXBhdGgiOiAiL2NlcnRzL2thZmthLWNsaWVudC5rZXkiLAogICAgICAgICAgICAgICAgImNsaWVudC1jZXJ0LXBhdGgiOiAiL2NlcnRzL2thZmthLWNsaWVudC5jcnQiLAogICAgICAgICAgICAgICAgImNhLWNlcnQtcGF0aCI6ICIvY2VydHMvY2EuY3J0IiwKICAgICAgICAgICAgICAgICJ0b3BpYyI6ICJjbHVzdGVyamoiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgICJjbG91ZC1pbmZvIjogewogICAgICAgICAgICAgICAgImNsdXN0ZXItbmFtZSI6ICJjbHVzdGVyamoiLAogICAgICAgICAgICAgICAgInN1Ym5ldCI6ICJhY2N0LVtjc3J0ZXN0XS9yZWdpb24tW3VzLXdlc3QtMV0vY29udGV4dC1bY2x1c3RlcmpqX292ZXJsYXldLWFkZHItWzE0LjMuMC4wLzE2XS9jaWRyLVsxNC4zLjAuMC8xNl0vc3VibmV0LVsxNC4zLjAuMC8xNl0iLAogICAgICAgICAgICAgICAgInZyZiI6ICJhY2N0LVtjc3J0ZXN0XS9yZWdpb24tW3VzLXdlc3QtMV0vY29udGV4dC1bY2x1c3RlcmpqX292ZXJsYXldLWFkZHItWzE0LjMuMC4wLzE2XSIKICAgICAgICAgICAgfQogICAgICAgIH0KICAgfQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IHNuYXQtb3BlcmF0b3ItY29uZmlnCiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogImR1bW15IgogICAgbmV0d29yay1wbHVnaW46IGFjaS1jb250YWluZXJzCmRhdGE6CiAgICAic3RhcnQiOiAiNTAwMCIKICAgICJlbmQiOiAiNjUwMDAiCiAgICAicG9ydHMtcGVyLW5vZGUiOiAiMzAwMCIKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lOiBhY2ktdXNlci1jZXJ0CiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogImR1bW15IgpkYXRhOgogIHVzZXIua2V5OiBMUzB0TFMxQ1JVZEpUaUJRVWtsV1FWUkZJRXRGV1MwdExTMHRDazFKU1VOa1owbENRVVJCVGtKbmEzRm9hMmxIT1hjd1FrRlJSVVpCUVZORFFXMUJkMmRuU21OQlowVkJRVzlIUWtGTE1IazJRVVJSZG10aGRVVjJhRGNLUmxkSlJESlFkRE5wUkcxT1R6TjFUa3RxTkdkUlNGWm5WbkpRYkhWb2QxRldjVGxVUWtRMFQyeG5hVlJYTlhCdE0xaDJNV1F5VWl0S2VsQTVRVFZETlFwNFlXMVRNMGt5WlhGT2VGTkZSbXRoVTBOTVUwVkJhbGxrTDJGVmRUVkxSRFExVVdWQlVEVkdWbVpRYVZaVWRYcEVNVk5oUkZGdGNEVTRlbEZJZGl0UUNtdHRlbTFUTVRKUmNtNVJiVkZxYldWd1l6SlJhVVpHU1dSRllXeEJaMDFDUVVGRlEyZFpRbU5pVDJOTU1FWnNTalZKYW5oSGRGYzVWMWR3U1ZBelFuUUtjbVZYU2s5RWNreHlia0pZWTNSTGVEWTJlbGRZZHpKNlVDdDZjWEJQVVVKeVdXeGljWFp6VlhSR2FFUlJNa3gxVW13elNuUkxhemR3WTJsV01WSlNWQW92TDA5VFVuSjFTRGhGY0hodk1sbGpUa3BHTTI5Q2EyZFdUSGxGZDNCb1NrZHlORVZXY25wNE1uWjVkQ3RhYWpGc2FVNUVaVXRxUlRkVlJVSlJTR1JQQ2xsSGJrMVVUbmw1VVdOUmVEVnZPVUV2VVVwQ1FVOVNXVkozZUdaalNWQXhlbVJ3V2tWRWNuQXZVRkpsYlVSRlNIaElSbTVaY0ZBelQwWldOR1ZPZGtVS1dGSXpjbTF1Y1RFMFZHbHJTVmRTYjJZcldreHJNMlYxU1hVeE9UaGpOakppWlVJek1HbEVSVlowVFVOUlVVUkRURTV4WVhob1ZtTmhhaXRtZGpWRE1RcDZUUzk1T1hKWGNXUjVWREZ6Y1RkQmVrNVdPRVJETTFWMGRFcFZWa0ZZVFVkVFdERjZSMHQxYTJOaVZtSlZlV0o2Wlc1VGFYVmlWRmhHTTJkV0syMVRDamhtUjI1QmEwRlZMemxXVVRKMmIxTXJTMm80ZFhCSlYybFBkemxaVUVkdlIwdHVSazFDWms1MVlpdFNhRXR1UVhSRVpFbERRMGhHZUZSSk5FeHJabllLTTNab1kwdHVhMlZYV1VwWGVYVXhVVGhGTHpobk5taHpXVkZKU0VGclJVRnFWa2szTkVReVpYVnNORkkxUjBJeVNDOXljWFJxYUdONU5qVm1WbVp6ZHdwUFRqVmlNbWxoTjBSSUwzRTBUR3QxV25aakszRTBRMUJ4WlVseVVuQmhRVVpVTVhWdGJTOUNkemM0VFVSQlYzWXhLMVZFVEZGS1FWazVWSE5xVTBrMUNsTkRZMHhSTUVaV2JrUmFVMVZ3Vm1JMVdHOWliRU00VEU5aWVsVkRibVZEVTB0UlFpOW5lbTR3V0ZCNVJYUkNSMm96YXk5dlUwNTZXbUpWUm5RclIyRUtiR2x4WTFBeE1WTmtVRkJCTTJjOVBRb3RMUzB0TFVWT1JDQlFVa2xXUVZSRklFdEZXUzB0TFMwdENnPT0KICB1c2VyLmNydDogTFMwdExTMUNSVWRKVGlCRFJWSlVTVVpKUTBGVVJTMHRMUzB0Q2sxSlNVSTNSRU5EUVZaVlEwRm5VRzlOUVRCSFExTnhSMU5KWWpORVVVVkNRbEZWUVUxRU5IaERla0ZLUW1kT1ZrSkJXVlJCYkZaVVRWSlpkMFpCV1VRS1ZsRlJTMFJCTVVSaFdFNXFZbmxDVkdWWVRqQmFWekY2VFZKamQwWlJXVVJXVVZGRVJFRTFWbU15Vm5sSlIwNXpaRmhPTUZwWVNuRmhha0ZsUm5jd2VRcE5SRUUxVFVSWmVFNTZUVEpOVkZwaFJuY3dlazFFUVRWTlJGVjNUbFJOTWsxVVdtRk5SRFI0UTNwQlNrSm5UbFpDUVZsVVFXeFdWRTFTV1hkR1FWbEVDbFpSVVV0RVFURkVZVmhPYW1KNVFsUmxXRTR3V2xjeGVrMVNZM2RHVVZsRVZsRlJSRVJCTlZaak1sWjVTVWRPYzJSWVRqQmFXRXB4WVdwRFFtNTZRVTRLUW1kcmNXaHJhVWM1ZHpCQ1FWRkZSa0ZCVDBKcVVVRjNaMWxyUTJkWlJVRnlWRXh2UVU1REsxSnhORk1yU0hOV1dXZFFXU3N6WlVsUFdUQTNaVFF3Y1FwUWFVSkJaRmRDVjNNclZ6WklRa0pYY2pGTlJWQm5ObGREU2s1aWJXMWlaR1V2VmpOYVNEUnVUUzh3Ukd0TWJrWnhXa3hqYWxvMmJ6TkdTVkZYVW5CSkNrbDBTVkZEVG1nek9YQlROMnR2VUdwc1FqUkJMMnRXVmpnclNsWlBOMDFRVmtwdlRrTmhibTU2VGtGbEx6UXJVMkpQV2t4WVdrTjFaRU5hUTA5YU5td0tlbHBEU1ZWVmFEQlNjVlZEUVhkRlFVRlVRVTVDWjJ0eGFHdHBSemwzTUVKQlVWVkdRVUZQUW1kUlFXNTVOVzlXVWpkV0wwcG9Oek5vSzA5aU5EaEVVd3AxU214RVdXY3lOV3h6VFdVd0t6SktWRnB1TUV0YWNFeFBhMHh3U1dSYVMxQTFiekZVZHpKSldIazNTVTV3Ym5ObFJrOVRja1pQT1dGalQyMXNjMlkzQ25remNEaFBVbWN5TWtOWVFWQXZlWFZqUlVoU09FcGxXR0U1VFd4SmJWcHlUVXMzTTNkUlVFSnhZMVJOUXpkTVZEZHVPVk0zVm05MVdrUTFka2d5VlhnS1EyTXZRM2htTjNWNWRIUkpOSE5EV0hBM2VubzVRVDA5Q2kwdExTMHRSVTVFSUVORlVsUkpSa2xEUVZSRkxTMHRMUzBLCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgbmFtZToga2Fma2EtY2xpZW50LWNlcnRpZmljYXRlcyAKICBuYW1lc3BhY2U6IGFjaS1jb250YWluZXJzLXN5c3RlbQogIGxhYmVsczoKICAgIGFjaS1jb250YWluZXJzLWNvbmZpZy12ZXJzaW9uOiAiZHVtbXkiCmRhdGE6CiAgY2EuY3J0OiBibTl1WlE9PQogIGthZmthLWNsaWVudC5jcnQ6IGJtOXVaUT09CiAga2Fma2EtY2xpZW50LmtleTogYm05dVpRPT0KLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbnRyb2xsZXIKICBuYW1lc3BhY2U6IGFjaS1jb250YWluZXJzLXN5c3RlbQogIGxhYmVsczoKICAgIGFjaS1jb250YWluZXJzLWNvbmZpZy12ZXJzaW9uOiAiZHVtbXkiCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1ob3N0LWFnZW50CiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogImR1bW15IgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogImR1bW15IgogICAgbmV0d29yay1wbHVnaW46IGFjaS1jb250YWluZXJzCiAgbmFtZTogYWNpLWNvbnRhaW5lcnM6Y29udHJvbGxlcgpydWxlczoKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIG5vZGVzCiAgLSBuYW1lc3BhY2VzCiAgLSBwb2RzCiAgLSBwb2RzL2V4ZWMKICAtIGVuZHBvaW50cwogIC0gc2VydmljZXMKICAtIGV2ZW50cwogIC0gcmVwbGljYXRpb25jb250cm9sbGVycwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAogIC0gcGF0Y2gKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBkZWxldGUKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIGNvbmZpZ21hcHMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBkZWxldGUKLSBhcGlHcm91cHM6CiAgLSAiYXBpZXh0ZW5zaW9ucy5rOHMuaW8iCiAgcmVzb3VyY2VzOgogIC0gY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucwogIHZlcmJzOgogIC0gJyonCi0gYXBpR3JvdXBzOgogIC0gIm5ldHdvcmtpbmcuazhzLmlvIgogIHJlc291cmNlczoKICAtIG5ldHdvcmtwb2xpY2llcwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAotIGFwaUdyb3VwczoKICAtICJhY2kuYXciCiAgcmVzb3VyY2VzOgogIC0gZXBncwogIC0gY29udHJhY3RzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gImFjaS5hdyIKICByZXNvdXJjZXM6CiAgLSBnYnBzc3RhdGVzCiAgLSBnYnBzc3RhdGVzL3N0YXR1cwogIHZlcmJzOgogIC0gJyonCi0gYXBpR3JvdXBzOgogIC0gImFwcHMiCiAgcmVzb3VyY2VzOgogIC0gZGVwbG95bWVudHMKICAtIHJlcGxpY2FzZXRzCiAgLSBkYWVtb25zZXRzCiAgLSBzdGF0ZWZ1bHNldHMKICB2ZXJiczoKICAtICcqJwotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gcG9kcwogIC0gcG9kcy9leGVjCiAgLSBub2RlcwogIC0gc2VydmljZXMvc3RhdHVzCiAgdmVyYnM6CiAgLSAnKicKLSBhcGlHcm91cHM6CiAgLSAibW9uaXRvcmluZy5jb3Jlb3MuY29tIgogIHJlc291cmNlczoKICAtIHNlcnZpY2Vtb25pdG9ycwogIHZlcmJzOgogIC0gZ2V0CiAgLSBjcmVhdGUKLSBhcGlHcm91cHM6CiAgLSAiYWNpLnNuYXQiCiAgcmVzb3VyY2VzOgogIC0gc25hdHBvbGljaWVzL2ZpbmFsaXplcnMKICAtIHNuYXRwb2xpY2llcy9zdGF0dXMKICAtIG5vZGVpbmZvcwogIHZlcmJzOgogIC0gdXBkYXRlCiAgLSBjcmVhdGUKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKICAtIGRlbGV0ZQotIGFwaUdyb3VwczoKICAtICJhY2kuc25hdCIKICByZXNvdXJjZXM6CiAgLSBzbmF0Z2xvYmFsaW5mb3MKICAtIHNuYXRwb2xpY2llcwogIC0gbm9kZWluZm9zCiAgLSByZGNvbmZpZ3MKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKICAtIGNyZWF0ZQogIC0gdXBkYXRlCiAgLSBkZWxldGUKLSBhcGlHcm91cHM6CiAgLSAiYWNpLnFvcyIKICByZXNvdXJjZXM6CiAgLSBxb3Nwb2xpY2llcwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAogIC0gY3JlYXRlCiAgLSB1cGRhdGUKICAtIGRlbGV0ZQogIC0gcGF0Y2gKLSBhcGlHcm91cHM6CiAgLSAiYWNpLm5ldGZsb3ciCiAgcmVzb3VyY2VzOgogIC0gbmV0Zmxvd3BvbGljaWVzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0CiAgLSB1cGRhdGUKLSBhcGlHcm91cHM6CiAgLSAiYWNpLmVyc3BhbiIKICByZXNvdXJjZXM6CiAgLSBlcnNwYW5wb2xpY2llcwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAogIC0gdXBkYXRlCi0gYXBpR3JvdXBzOgogIC0gImFjaS5hdyIKICByZXNvdXJjZXM6CiAgLSBwb2RpZnMKICB2ZXJiczoKICAtICcqJwotIGFwaUdyb3VwczoKICAtIGFwcHMub3BlbnNoaWZ0LmlvCiAgcmVzb3VyY2VzOgogIC0gZGVwbG95bWVudGNvbmZpZ3MKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSBkaXNjb3ZlcnkuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gZW5kcG9pbnRzbGljZXMKICB2ZXJiczoKICAtIGdldAogIC0gbGlzdAogIC0gd2F0Y2gKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYWNpLWNvbnRhaW5lcnMtY29uZmlnLXZlcnNpb246ICJkdW1teSIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogIG5hbWU6IGFjaS1jb250YWluZXJzOmhvc3QtYWdlbnQKcnVsZXM6Ci0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBub2RlcwogIC0gbmFtZXNwYWNlcwogIC0gcG9kcwogIC0gZW5kcG9pbnRzCiAgLSBzZXJ2aWNlcwogIC0gcmVwbGljYXRpb25jb250cm9sbGVycwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAotIGFwaUdyb3VwczoKICAtICJhcGlleHRlbnNpb25zLms4cy5pbyIKICByZXNvdXJjZXM6CiAgLSBjdXN0b21yZXNvdXJjZWRlZmluaXRpb25zCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0Ci0gYXBpR3JvdXBzOgogIC0gImFjaS5hdyIKICByZXNvdXJjZXM6CiAgLSBwb2RpZnMKICAtIHBvZGlmcy9zdGF0dXMKICB2ZXJiczoKICAtICIqIgotIGFwaUdyb3VwczoKICAtICJuZXR3b3JraW5nLms4cy5pbyIKICByZXNvdXJjZXM6CiAgLSBuZXR3b3JrcG9saWNpZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSAiYXBwcyIKICByZXNvdXJjZXM6CiAgLSBkZXBsb3ltZW50cwogIC0gcmVwbGljYXNldHMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKLSBhcGlHcm91cHM6CiAgLSAiYWNpLnNuYXQiCiAgcmVzb3VyY2VzOgogIC0gc25hdHBvbGljaWVzCiAgLSBzbmF0Z2xvYmFsaW5mb3MKICAtIHJkY29uZmlncwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAotIGFwaUdyb3VwczoKICAtICJhY2kucW9zIgogIHJlc291cmNlczoKICAtIHFvc3BvbGljaWVzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAogIC0gZ2V0CiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gZGVsZXRlCiAgLSBwYXRjaAotIGFwaUdyb3VwczoKICAtICJhY2kubmV0ZmxvdyIKICByZXNvdXJjZXM6CiAgLSBuZXRmbG93cG9saWNpZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCiAgLSBnZXQKICAtIHVwZGF0ZQotIGFwaUdyb3VwczoKICAtICJhY2kuc25hdCIKICByZXNvdXJjZXM6CiAgLSBub2RlaW5mb3MKICAtIHNuYXRsb2NhbGluZm9zCiAgdmVyYnM6CiAgLSBjcmVhdGUKICAtIHVwZGF0ZQogIC0gbGlzdAogIC0gd2F0Y2gKICAtIGdldAotIGFwaUdyb3VwczoKICAtIGRpc2NvdmVyeS5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBlbmRwb2ludHNsaWNlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogYWNpLWNvbnRhaW5lcnM6Y29udHJvbGxlcgogIGxhYmVsczoKICAgIGFjaS1jb250YWluZXJzLWNvbmZpZy12ZXJzaW9uOiAiZHVtbXkiCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGFjaS1jb250YWluZXJzOmNvbnRyb2xsZXIKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBhY2ktY29udGFpbmVycy1jb250cm9sbGVyCiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IGFjaS1jb250YWluZXJzOmhvc3QtYWdlbnQKICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogImR1bW15Igpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBhY2ktY29udGFpbmVyczpob3N0LWFnZW50CnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogYWNpLWNvbnRhaW5lcnMtaG9zdC1hZ2VudAogIG5hbWVzcGFjZTogYWNpLWNvbnRhaW5lcnMtc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1ob3N0CiAgbmFtZXNwYWNlOiBhY2ktY29udGFpbmVycy1zeXN0ZW0KICBsYWJlbHM6CiAgICBhY2ktY29udGFpbmVycy1jb25maWctdmVyc2lvbjogImR1bW15IgogICAgbmV0d29yay1wbHVnaW46IGFjaS1jb250YWluZXJzCnNwZWM6CiAgdXBkYXRlU3RyYXRlZ3k6CiAgICB0eXBlOiBSb2xsaW5nVXBkYXRlCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtaG9zdAogICAgICBuZXR3b3JrLXBsdWdpbjogYWNpLWNvbnRhaW5lcnMKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtaG9zdAogICAgICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICcnCiAgICAgICAgcHJvbWV0aGV1cy5pby9zY3JhcGU6ICJ0cnVlIgogICAgICAgIHByb21ldGhldXMuaW8vcG9ydDogIjk2MTIiCiAgICBzcGVjOgogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICBob3N0UElEOiB0cnVlCiAgICAgIGhvc3RJUEM6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBhY2ktY29udGFpbmVycy1ob3N0LWFnZW50CiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gb3BlcmF0b3I6IEV4aXN0cwogICAgICBpbml0Q29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGNuaWRlcGxveQogICAgICAgICAgaW1hZ2U6IG5vaXJvbGFicy9jbmlkZXBsb3k6NS4yLjEuMC4wZWY0NzE4CiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICAgLSBTWVNfQURNSU4KICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBjbmktYmluCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvbW50L2NuaS1iaW4KICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGFjaS1jb250YWluZXJzLWhvc3QKICAgICAgICAgIGltYWdlOiBub2lyb2xhYnMvYWNpLWNvbnRhaW5lcnMtaG9zdDpjaV90ZXN0CiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICAgLSBTWVNfQURNSU4KICAgICAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgICAgICAtIFNZU19QVFJBQ0UKICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX05PREVfTkFNRQogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IHNwZWMubm9kZU5hbWUKICAgICAgICAgICAgLSBuYW1lOiBURU5BTlQKICAgICAgICAgICAgICB2YWx1ZTogImNzcnRlc3QiCiAgICAgICAgICAgIC0gbmFtZTogTk9ERV9FUEcKICAgICAgICAgICAgICB2YWx1ZTogImFjaS1jb250YWluZXJzLW5vZGVzIgogICAgICAgICAgICAtIG5hbWU6IE9QRkxFWF9NT0RFCiAgICAgICAgICAgICAgdmFsdWU6IG92ZXJsYXkKICAgICAgICAgICAgLSBuYW1lOiBNVUxUVVMKICAgICAgICAgICAgICB2YWx1ZTogJ1RydWUnCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogY25pLWJpbgogICAgICAgICAgICAgIG1vdW50UGF0aDogL21udC9jbmktYmluCiAgICAgICAgICAgIC0gbmFtZTogY25pLWNvbmYKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9tbnQvY25pLWNvbmYKICAgICAgICAgICAgLSBuYW1lOiBob3N0dmFyCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3ZhcgogICAgICAgICAgICAtIG5hbWU6IGhvc3RydW4KICAgICAgICAgICAgICBtb3VudFBhdGg6IC9ydW4KICAgICAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3J1bgogICAgICAgICAgICAtIG5hbWU6IG9wZmxleC1ob3N0Y29uZmlnLXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ldGMvb3BmbGV4LWFnZW50LW92cy9iYXNlLWNvbmYuZAogICAgICAgICAgICAtIG5hbWU6IGhvc3QtY29uZmlnLXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ldGMvYWNpLWNvbnRhaW5lcnMvCiAgICAgICAgICAgIC0gbmFtZTogbXVsdHVzLWNuaS1jb25mCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvbW50L211bHR1cy1jbmktY29uZgogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvc3RhdHVzCiAgICAgICAgICAgICAgcG9ydDogODA5MAogICAgICAgIC0gbmFtZTogb3BmbGV4LWFnZW50CiAgICAgICAgICBlbnY6CiAgICAgICAgICAgIC0gbmFtZTogUkVCT09UX1dJVEhfT1ZTCiAgICAgICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgICAgICAtIG5hbWU6IFNTTF9NT0RFCiAgICAgICAgICAgICAgdmFsdWU6IGRpc2FibGVkCiAgICAgICAgICBpbWFnZTogbm9pcm9sYWJzL29wZmxleDpjaV90ZXN0CiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgICAgYWRkOgogICAgICAgICAgICAgICAgLSBORVRfQURNSU4KICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBob3N0dmFyCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3ZhcgogICAgICAgICAgICAtIG5hbWU6IGhvc3RydW4KICAgICAgICAgICAgICBtb3VudFBhdGg6IC9ydW4KICAgICAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3J1bgogICAgICAgICAgICAtIG5hbWU6IG9wZmxleC1ob3N0Y29uZmlnLXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ldGMvb3BmbGV4LWFnZW50LW92cy9iYXNlLWNvbmYuZAogICAgICAgICAgICAtIG5hbWU6IG9wZmxleC1jb25maWctdm9sdW1lCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL2V0Yy9vcGZsZXgtYWdlbnQtb3ZzL2NvbmYuZAogICAgICAgIC0gbmFtZTogb3BmbGV4LXNlcnZlcgogICAgICAgICAgaW1hZ2U6IG5vaXJvbGFicy9vcGZsZXgtc2VydmVyOmNpX3Rlc3QKICAgICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICAgIGNhcGFiaWxpdGllczoKICAgICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgICAgICAtIE5FVF9BRE1JTgogICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogMTk5OTkKICAgICAgICAgIHRlcm1pbmF0aW9uTWVzc2FnZVBhdGg6IC9kZXYvdGVybWluYXRpb24tbG9nCiAgICAgICAgICB0ZXJtaW5hdGlvbk1lc3NhZ2VQb2xpY3k6IEZpbGUKICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBvcGZsZXgtc2VydmVyLWNvbmZpZy12b2x1bWUKICAgICAgICAgICAgICBtb3VudFBhdGg6IC91c3IvbG9jYWwvZXRjL29wZmxleC1zZXJ2ZXIKICAgICAgICAgICAgLSBuYW1lOiBob3N0dmFyCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3ZhcgogICAgICAgIC0gbmFtZTogbWNhc3QtZGFlbW9uCiAgICAgICAgICBpbWFnZTogbm9pcm9sYWJzL29wZmxleDpjaV90ZXN0CiAgICAgICAgICBjb21tYW5kOiBbIi9iaW4vc2giXQogICAgICAgICAgYXJnczogWyIvdXNyL2xvY2FsL2Jpbi9sYXVuY2gtbWNhc3RkYWVtb24uc2giXQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBBbHdheXMKICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBob3N0dmFyCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3ZhcgogICAgICAgICAgICAtIG5hbWU6IGhvc3RydW4KICAgICAgICAgICAgICBtb3VudFBhdGg6IC9ydW4KICAgICAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL3J1bgogICAgICByZXN0YXJ0UG9saWN5OiBBbHdheXMKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGNuaS1iaW4KICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvdmFyL2xpYgogICAgICAgIC0gbmFtZTogY25pLWNvbmYKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvZXRjL2t1YmVybmV0ZXMKICAgICAgICAtIG5hbWU6IGhvc3R2YXIKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvdmFyCiAgICAgICAgLSBuYW1lOiBob3N0cnVuCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3J1bgogICAgICAgIC0gbmFtZTogaG9zdC1jb25maWctdm9sdW1lCiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbmZpZwogICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAtIGtleTogaG9zdC1hZ2VudC1jb25maWcKICAgICAgICAgICAgICAgIHBhdGg6IGhvc3QtYWdlbnQuY29uZgogICAgICAgIC0gbmFtZTogb3BmbGV4LWhvc3Rjb25maWctdm9sdW1lCiAgICAgICAgICBlbXB0eURpcjoKICAgICAgICAgICAgbWVkaXVtOiBNZW1vcnkKICAgICAgICAtIG5hbWU6IG9wZmxleC1jb25maWctdm9sdW1lCiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbmZpZwogICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAtIGtleTogb3BmbGV4LWFnZW50LWNvbmZpZwogICAgICAgICAgICAgICAgcGF0aDogbG9jYWwuY29uZgogICAgICAgIC0gbmFtZTogb3BmbGV4LXNlcnZlci1jb25maWctdm9sdW1lCiAgICAgICAgLSBuYW1lOiBtdWx0dXMtY25pLWNvbmYKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvdmFyL3J1bi9tdWx0dXMvCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBuYW1lOiBhY2ktY29udGFpbmVycy1vcGVudnN3aXRjaAogIG5hbWVzcGFjZTogYWNpLWNvbnRhaW5lcnMtc3lzdGVtCiAgbGFiZWxzOgogICAgYWNpLWNvbnRhaW5lcnMtY29uZmlnLXZlcnNpb246ICJkdW1teSIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwpzcGVjOgogIHVwZGF0ZVN0cmF0ZWd5OgogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLW9wZW52c3dpdGNoCiAgICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBuYW1lOiBhY2ktY29udGFpbmVycy1vcGVudnN3aXRjaAogICAgICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICcnCiAgICBzcGVjOgogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICBob3N0UElEOiB0cnVlCiAgICAgIGhvc3RJUEM6IHRydWUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBhY2ktY29udGFpbmVycy1ob3N0LWFnZW50CiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gb3BlcmF0b3I6IEV4aXN0cwogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogYWNpLWNvbnRhaW5lcnMtb3BlbnZzd2l0Y2gKICAgICAgICAgIGltYWdlOiBub2lyb2xhYnMvb3BlbnZzd2l0Y2g6Y2lfdGVzdAogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBBbHdheXMKICAgICAgICAgIHJlc291cmNlczoKICAgICAgICAgICAgbGltaXRzOgogICAgICAgICAgICAgIG1lbW9yeTogIjFHaSIKICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICAgIGFkZDoKICAgICAgICAgICAgICAgIC0gTkVUX0FETUlOCiAgICAgICAgICAgICAgICAtIFNZU19NT0RVTEUKICAgICAgICAgICAgICAgIC0gU1lTX05JQ0UKICAgICAgICAgICAgICAgIC0gSVBDX0xPQ0sKICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBPVlNfUlVORElSCiAgICAgICAgICAgICAgdmFsdWU6IC91c3IvbG9jYWwvdmFyL3J1bi9vcGVudnN3aXRjaAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IGhvc3R2YXIKICAgICAgICAgICAgICBtb3VudFBhdGg6IC91c3IvbG9jYWwvdmFyCiAgICAgICAgICAgIC0gbmFtZTogaG9zdHJ1bgogICAgICAgICAgICAgIG1vdW50UGF0aDogL3J1bgogICAgICAgICAgICAtIG5hbWU6IGhvc3RydW4KICAgICAgICAgICAgICBtb3VudFBhdGg6IC91c3IvbG9jYWwvcnVuCiAgICAgICAgICAgIC0gbmFtZTogaG9zdGV0YwogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ldGMKICAgICAgICAgICAgLSBuYW1lOiBob3N0bW9kdWxlcwogICAgICAgICAgICAgIG1vdW50UGF0aDogL2xpYi9tb2R1bGVzCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgICAtIC91c3IvbG9jYWwvYmluL2xpdmVuZXNzLW92cy5zaAogICAgICByZXN0YXJ0UG9saWN5OiBBbHdheXMKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGhvc3RldGMKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvZXRjCiAgICAgICAgLSBuYW1lOiBob3N0dmFyCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3ZhcgogICAgICAgIC0gbmFtZTogaG9zdHJ1bgogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IC9ydW4KICAgICAgICAtIG5hbWU6IGhvc3Rtb2R1bGVzCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL2xpYi9tb2R1bGVzCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogYWNpLWNvbnRhaW5lcnMtY29udHJvbGxlcgogIG5hbWVzcGFjZTogYWNpLWNvbnRhaW5lcnMtc3lzdGVtCiAgbGFiZWxzOgogICAgYWNpLWNvbnRhaW5lcnMtY29uZmlnLXZlcnNpb246ICJkdW1teSIKICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtY29udHJvbGxlcgpzcGVjOgogIHJlcGxpY2FzOiAxCiAgc3RyYXRlZ3k6CiAgICB0eXBlOiBSZWNyZWF0ZQogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIG5hbWU6IGFjaS1jb250YWluZXJzLWNvbnRyb2xsZXIKICAgICAgbmV0d29yay1wbHVnaW46IGFjaS1jb250YWluZXJzCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtY29udHJvbGxlcgogICAgICBuYW1lc3BhY2U6IGFjaS1jb250YWluZXJzLXN5c3RlbQogICAgICBsYWJlbHM6CiAgICAgICAgbmFtZTogYWNpLWNvbnRhaW5lcnMtY29udHJvbGxlcgogICAgICAgIG5ldHdvcmstcGx1Z2luOiBhY2ktY29udGFpbmVycwogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICcnCiAgICBzcGVjOgogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGFjaS1jb250YWluZXJzLWNvbnRyb2xsZXIKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgICAgLSBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgICBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGFjaS1nYnBzZXJ2ZXIKICAgICAgICAgIGltYWdlOiBub2lyb2xhYnMvZ2JwLXNlcnZlcjpjaV90ZXN0CiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IEFsd2F5cwogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IGNvbnRyb2xsZXItY29uZmlnLXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ldGMvYWNpLWNvbnRhaW5lcnMvCiAgICAgICAgICAgIC0gbmFtZToga2Fma2EtY2VydHMKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9jZXJ0cwogICAgICAgICAgICAtIG5hbWU6IGFjaS11c2VyLWNlcnQtdm9sdW1lCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL2V0Yy9hY2ktY2VydC8KICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBHQlBfU0VSVkVSX0NPTkYKICAgICAgICAgICAgICB2YWx1ZTogL3Vzci9sb2NhbC9ldGMvYWNpLWNvbnRhaW5lcnMvZ2JwLXNlcnZlci5jb25mCiAgICAgICAgLSBuYW1lOiBhY2ktY29udGFpbmVycy1jb250cm9sbGVyCiAgICAgICAgICBpbWFnZTogbm9pcm9sYWJzL2FjaS1jb250YWluZXJzLWNvbnRyb2xsZXI6Y2lfdGVzdAogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBBbHdheXMKICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBXQVRDSF9OQU1FU1BBQ0UKICAgICAgICAgICAgICB2YWx1ZTogIiIKICAgICAgICAgICAgLSBuYW1lOiBBQ0lfU05BVF9OQU1FU1BBQ0UKICAgICAgICAgICAgICB2YWx1ZTogImFjaS1jb250YWluZXJzLXN5c3RlbSIKICAgICAgICAgICAgLSBuYW1lOiBBQ0lfU05BR0xPQkFMSU5GT19OQU1FCiAgICAgICAgICAgICAgdmFsdWU6ICJzbmF0Z2xvYmFsaW5mbyIKICAgICAgICAgICAgLSBuYW1lOiBBQ0lfUkRDT05GSUdfTkFNRQogICAgICAgICAgICAgIHZhbHVlOiAicm91dGluZ2RvbWFpbi1jb25maWciCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogY29udHJvbGxlci1jb25maWctdm9sdW1lCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL2V0Yy9hY2ktY29udGFpbmVycy8KICAgICAgICAgICAgLSBuYW1lOiBhY2ktdXNlci1jZXJ0LXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL3Vzci9sb2NhbC9ldGMvYWNpLWNlcnQvCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC9zdGF0dXMKICAgICAgICAgICAgICBwb3J0OiA4MDkxCiAgICAgIGluaXRDb250YWluZXJzOgogICAgICAgIC0gaW1hZ2U6IG5vaXJvbGFicy9nYnAtc2VydmVyLWJhdGNoOmNpX3Rlc3QKICAgICAgICAgIGltYWdlUHVsbFBvbGljeTogQWx3YXlzCiAgICAgICAgICBuYW1lOiBzdGF0ZWluaXQKICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgIC0gZ2Jwc2VydmVyCiAgICAgICAgICAgIC0gLWluaXQKICAgICAgICAgICAgLSAtY29uZmlnLXBhdGgKICAgICAgICAgICAgLSAvdXNyL2xvY2FsL2V0Yy9hY2ktY29udGFpbmVycy9nYnAtc2VydmVyLmNvbmYKICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBjb250cm9sbGVyLWNvbmZpZy12b2x1bWUKICAgICAgICAgICAgICBtb3VudFBhdGg6IC91c3IvbG9jYWwvZXRjL2FjaS1jb250YWluZXJzLwogICAgICAgICAgICAtIG5hbWU6IGFjaS11c2VyLWNlcnQtdm9sdW1lCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvdXNyL2xvY2FsL2V0Yy9hY2ktY2VydC8KICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGthZmthLWNlcnRzCiAgICAgICAgICBzZWNyZXQ6CiAgICAgICAgICAgIHNlY3JldE5hbWU6IGthZmthLWNsaWVudC1jZXJ0aWZpY2F0ZXMKICAgICAgICAtIG5hbWU6IGFjaS11c2VyLWNlcnQtdm9sdW1lCiAgICAgICAgICBzZWNyZXQ6CiAgICAgICAgICAgIHNlY3JldE5hbWU6IGFjaS11c2VyLWNlcnQKICAgICAgICAtIG5hbWU6IGNvbnRyb2xsZXItY29uZmlnLXZvbHVtZQogICAgICAgICAgY29uZmlnTWFwOgogICAgICAgICAgICBuYW1lOiBhY2ktY29udGFpbmVycy1jb25maWcKICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgLSBrZXk6IGNvbnRyb2xsZXItY29uZmlnCiAgICAgICAgICAgICAgICBwYXRoOiBjb250cm9sbGVyLmNvbmYKICAgICAgICAgICAgICAtIGtleTogZ2JwLXNlcnZlci1jb25maWcKICAgICAgICAgICAgICAgIHBhdGg6IGdicC1zZXJ2ZXIuY29uZgotLS0KYXBpVmVyc2lvbjogYWNpLmF3L3YxCmtpbmQ6IFBvZElGCm1ldGFkYXRhOgogIG5hbWU6IGluZXQtcm91dGUKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnN0YXR1czoKICBlcGc6IGFjaS1jb250YWluZXJzLWluZXQtb3V0CiAgaXBhZGRyOiAwLjAuMC4wLzAK\"\
    \n}"
kind: ConfigMap
metadata:
  labels:
    aci-containers-config-version: dummy
    network-plugin: aci-containers
  name: aci-operator-config
  namespace: aci-containers-system
