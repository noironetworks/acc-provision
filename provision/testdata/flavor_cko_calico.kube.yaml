apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: network-operator-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  creationTimestamp: null
  name: networkoperators.network-operator-controller.net.op
spec:
  group: network-operator-controller.net.op
  names:
    kind: NetworkOperator
    listKind: NetworkOperatorList
    plural: networkoperators
    singular: networkoperator
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: NetworkOperator is the Schema for the networkoperators API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: NetworkOperatorSpec defines the desired state of NetworkOperator
            properties:
              clusterprofile:
                description: Cluster Profile
                type: string
              config:
                properties:
                  clusterspec:
                    additionalProperties:
                      type: string
                    description: 'Example Keys for clusterspecs: "cni-name:cni-spec (base64 encoded)"'
                    type: object
                  cniconfig:
                    additionalProperties:
                      description: Individual CNI Configs
                      properties:
                        calico:
                          type: object
                      type: object
                    description: CNIConfig
                    type: object
                type: object
                x-kubernetes-preserve-unknown-fields: true
              netopcontrol:
                type: string
            type: object
          status:
            description: NetworkOperatorStatus defines the observed state of NetworkOperator
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: network-operator-controller-manager
  namespace: network-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: network-operator-leader-election-role
  namespace: network-operator-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: network-operator-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - events
  - namespaces
  - nodes
  - pods
  - podtemplates
  - secrets
  - serviceaccounts
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network-operator-controller.net.op
  resources:
  - networkoperators
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network-operator-controller.net.op
  resources:
  - networkoperators/finalizers
  verbs:
  - update
- apiGroups:
  - network-operator-controller.net.op
  resources:
  - networkoperators/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - amazoncloudintegrations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - amazoncloudintegrations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - apiservers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - apiservers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - applicationlayers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - applicationlayers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - authentications
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - authentications/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - compliances
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - compliances/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - installations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - installations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - intrusiondetections
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - intrusiondetections/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - logcollectors
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - logcollectors/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - logstorages
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - logstorages/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - managementclusterconnections
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - managementclusterconnections/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - managers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - managers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - monitors
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - monitors/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  - clusterroles
  - rolebindings
  - roles
  verbs:
  - bind
  - create
  - delete
  - escalate
  - get
  - list
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: network-operator-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: network-operator-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: network-operator-leader-election-rolebinding
  namespace: network-operator-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: network-operator-leader-election-role
subjects:
- kind: ServiceAccount
  name: network-operator-controller-manager
  namespace: network-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: network-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: network-operator-manager-role
subjects:
- kind: ServiceAccount
  name: network-operator-controller-manager
  namespace: network-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: network-operator-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: network-operator-proxy-role
subjects:
- kind: ServiceAccount
  name: network-operator-controller-manager
  namespace: network-operator-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: bd060ae3.net.op
kind: ConfigMap
metadata:
  name: network-operator-manager-config
  namespace: network-operator-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: network-operator-controller-manager-metrics-service
  namespace: network-operator-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: network-operator-controller-manager
  namespace: network-operator-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=10
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.8.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        image: quay.io/noirolabs/cni-manager:test
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 200m
            memory: 100Mi
          requests:
            cpu: 100m
            memory: 20Mi
        securityContext:
          allowPrivilegeEscalation: true
      securityContext:
        runAsNonRoot: false
      serviceAccountName: network-operator-controller-manager
      terminationGracePeriodSeconds: 10

---
apiVersion: network-operator-controller.net.op/v1
kind: NetworkOperator
metadata:
  name: networkoperator-sample
spec:
  netopcontrol: Install
  clusterprofile: cko-calico
  config:
    clusterspec:
      cko-calico: 
      cko-calico-bgp: I1RoaXMgc2VjdGlvbiBkaXNhYmxlcyBCR1AgZnVsbCBtZXNoIGJldHdlZW4gdGhlIEs4cyBub2RlcyBhbmQgc2V0IHRoZSBzZXJ2aWNlQ2x1c3RlcklQcyBhbmQgc2VydmljZUV4dGVybmFsSVBzIHN1Ym5ldHMgc28gdGhhdCB0aGV5IGNhbiBiZSBhZHZlcnRpc2VkIGJ5IGVCR1AuIFRoZXNlIHN1Ym5ldHMgYXJlIHRoZSBTZXJ2aWNlIGFuZCBFeHRlcm5hbCBTZXJ2aWNlIHN1Ym5ldHMgaW4gS3ViZXJuZXRlcy4KYXBpVmVyc2lvbjogcHJvamVjdGNhbGljby5vcmcvdjMKa2luZDogQkdQQ29uZmlndXJhdGlvbgptZXRhZGF0YToKICBuYW1lOiBkZWZhdWx0CnNwZWM6CiAgbG9nU2V2ZXJpdHlTY3JlZW46IEluZm8KICBub2RlVG9Ob2RlTWVzaEVuYWJsZWQ6IGZhbHNlCiAgc2VydmljZUNsdXN0ZXJJUHM6CiAgLSBjaWRyOiAxNzIuMzAuMC4wLzE2CiAgc2VydmljZUV4dGVybmFsSVBzOgogIC0gY2lkcjogMTUxLjkuMS4xLzI0Ci0tLQoKLS0tCmFwaVZlcnNpb246IHByb2plY3RjYWxpY28ub3JnL3YzCmtpbmQ6IEJHUFBlZXIKbWV0YWRhdGE6IAogIG5hbWU6IDE5Mi0xNjgtMi0yMDEKc3BlYzoKICBwZWVySVA6IDE5Mi4xNjguMi4yMDEKICBhc051bWJlcjogNjQ1MTIKICBub2RlU2VsZWN0b3I6IHJhY2tfaWQgPT0gIjEiCiAgcGFzc3dvcmQ6CiAgICBzZWNyZXRLZXlSZWY6CiAgICAgIG5hbWU6IGJncC1zZWNyZXRzCiAgICAgIGtleTogdGVzdAoKCgotLS0KYXBpVmVyc2lvbjogcHJvamVjdGNhbGljby5vcmcvdjMKa2luZDogQkdQUGVlcgptZXRhZGF0YTogCiAgbmFtZTogMTkyLTE2OC0yLTIwMgpzcGVjOgogIHBlZXJJUDogMTkyLjE2OC4yLjIwMgogIGFzTnVtYmVyOiA2NDUxMgogIG5vZGVTZWxlY3RvcjogcmFja19pZCA9PSAiMSIKICBwYXNzd29yZDoKICAgIHNlY3JldEtleVJlZjoKICAgICAgbmFtZTogYmdwLXNlY3JldHMKICAgICAga2V5OiB0ZXN0CgoKCi0tLQphcGlWZXJzaW9uOiBwcm9qZWN0Y2FsaWNvLm9yZy92MwpraW5kOiBCR1BQZWVyCm1ldGFkYXRhOiAKICBuYW1lOiAxOTItMTY4LTItMjAzCnNwZWM6CiAgcGVlcklQOiAxOTIuMTY4LjIuMjAzCiAgYXNOdW1iZXI6IDY0NTEyCiAgbm9kZVNlbGVjdG9yOiByYWNrX2lkID09ICIyIgogIHBhc3N3b3JkOgogICAgc2VjcmV0S2V5UmVmOgogICAgICBuYW1lOiBiZ3Atc2VjcmV0cwogICAgICBrZXk6IHRlc3QKCgoKLS0tCmFwaVZlcnNpb246IHByb2plY3RjYWxpY28ub3JnL3YzCmtpbmQ6IEJHUFBlZXIKbWV0YWRhdGE6IAogIG5hbWU6IDE5Mi0xNjgtMi0yMDQKc3BlYzoKICBwZWVySVA6IDE5Mi4xNjguMi4yMDQKICBhc051bWJlcjogNjQ1MTIKICBub2RlU2VsZWN0b3I6IHJhY2tfaWQgPT0gIjIiCiAgcGFzc3dvcmQ6CiAgICBzZWNyZXRLZXlSZWY6CiAgICAgIG5hbWU6IGJncC1zZWNyZXRzCiAgICAgIGtleTogdGVzdAoKCg==
