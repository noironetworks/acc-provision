apiVersion: controller.netop-manager.io/v1alpha1
kind: Installer
metadata:
  name: installer-platform
spec:
  operatorConfigs:
    platform:
      cko-diagnostic:
        options:
          01-checkerCRDs: 
          02-checkerCR: YXBpVmVyc2lvbjogbmV0dG9vbHMuZGVidWcvdjFhbHBoYTEKa2luZDogQ29ubmVjdGl2aXR5Q2hlY2tlcgptZXRhZGF0YToKIG5hbWU6IHRlc3QtY29ubi1jaGVjawogbmFtZXNwYWNlOiBuZXR0b29scwpzcGVjOgogcmVhY2hhYmlsaXR5X3Rlc3RfZW5hYmxlOgogIHBlcmlvZGljX3N5bmM6CiAgIGVuYWJsZV91cGRhdGVzOiBUcnVlCiAgIGludGVydmFsOiAxMjAKICBleHRlcm5hbF91cmw6CiAgIHVybDogZ29vZ2xlLmNvbQogIHByb3h5OgogICBodHRwX3Byb3h5OiAiIgogICBodHRwc19wcm94eTogIiIKIHJlYWNoYWJpbGl0eV90ZXN0czoKICBwb2RfdG9fcG9kOgogICAgdXBkYXRlX3N0YXR1czogdHJ1ZQogIHBvZF90b19ub2RlOgogICAgdXBkYXRlX3N0YXR1czogdHJ1ZQogIHBvZF90b19jbHVzdGVySVA6CiAgICB1cGRhdGVfc3RhdHVzOiB0cnVlCiAgcG9kX3RvX3NlcnZpY2U6CiAgICB1cGRhdGVfc3RhdHVzOiB0cnVlCiAgcG9kX3RvX0xCX1ZJUDoKICAgIHVwZGF0ZV9zdGF0dXM6IHRydWUKICBwb2RfdG9fTm9kZVBvcnQ6CiAgICB1cGRhdGVfc3RhdHVzOiB0cnVlCiAgcG9kX3RvX0V4dGVybmFsOgogICAgdXBkYXRlX3N0YXR1czogdHJ1ZQogIG5vZGVfdG9fbm9kZToKICAgIHVwZGF0ZV9zdGF0dXM6IHRydWUKICBub2RlX3RvX3BvZDoKICAgIHVwZGF0ZV9zdGF0dXM6IHRydWUKICBub2RlX3RvX2NsdXN0ZXJJUDoKICAgIHVwZGF0ZV9zdGF0dXM6IHRydWUKICBub2RlX3RvX0xCX1ZJUDoKICAgIHVwZGF0ZV9zdGF0dXM6IHRydWUKICBub2RlX3RvX05vZGVQb3J0OgogICAgdXBkYXRlX3N0YXR1czogZmFsc2UKICBub2RlX3RvX0V4dGVybmFsOgogICAgdXBkYXRlX3N0YXR1czogZmFsc2UK
          03-errorPodsReportingCR: YXBpVmVyc2lvbjogbmV0dG9vbHMuZGVidWcvdjFhbHBoYTEKa2luZDogRXJyb3JQb2RzUmVwb3J0aW5nCm1ldGFkYXRhOgogbmFtZTogZXJyb3ItcG9kcy1yZXBvcnQKIG5hbWVzcGFjZTogbmV0dG9vbHMKc3BlYzoKIHJlcG9ydGluZ19lbmFibGU6IFRydWU=
        type: connectivity-checker
        version: 0.9.0
