apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: netop-manager-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: cniops.network-function.netop-manager.io
spec:
  group: network-function.netop-manager.io
  names:
    kind: CniOps
    listKind: CniOpsList
    plural: cniops
    singular: cniops
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Date
      type: date
    - description: State/Phase of Installer
      jsonPath: .status.operatorStatus
      name: Phase
      type: string
    - description: Cni Type
      jsonPath: .status.cniType
      name: CNI-Type
      type: string
    - description: Cni Version
      jsonPath: .status.cniVersion
      name: CNI-Version
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: CniOps is the Schema for the cniops API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CniOpsSpec defines the desired state of CniOps.
            properties:
              config:
                properties:
                  workload:
                    description: First key should be internal child api
                    properties:
                      options:
                        additionalProperties:
                          type: string
                        type: object
                      type:
                        type: string
                      unmanaged:
                        type: boolean
                      version:
                        type: string
                    required:
                    - type
                    - version
                    type: object
                type: object
            type: object
          status:
            description: CniOpsStatus defines the observed state of CniOps.
            properties:
              Multus:
                type: boolean
              cniStatus:
                additionalProperties:
                  type: string
                type: object
              cniType:
                type: string
              cniVersion:
                type: string
              internalState:
                type: string
              ipam:
                type: string
              managedState:
                type: string
              observedGeneration:
                format: int64
                type: integer
              operatorStatus:
                type: string
              upgradeStatus:
                properties:
                  cniUpgradeState:
                    type: string
                  currentVersion:
                    type: string
                  previousVersion:
                    type: string
                type: object
              workloadCheck:
                additionalProperties:
                  type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: gitops.network-function.netop-manager.io
spec:
  group: network-function.netop-manager.io
  names:
    kind: GitOps
    listKind: GitOpsList
    plural: gitops
    singular: gitops
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GitOps is the Schema for the gitops API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GitOpsSpec defines the desired state of GitOps.
            properties:
              config:
                properties:
                  workload:
                    description: First key should be internal child api
                    properties:
                      options:
                        additionalProperties:
                          type: string
                        type: object
                      type:
                        type: string
                      unmanaged:
                        type: boolean
                      version:
                        type: string
                    required:
                    - type
                    - version
                    type: object
                type: object
            type: object
          status:
            description: GitOpsStatus defines the observed state of GitOps.
            properties:
              gStatus:
                additionalProperties:
                  type: string
                type: object
              gType:
                description: 'INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run "make" to regenerate code after modifying this file'
                type: string
              observedGeneration:
                format: int64
                type: integer
              state:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: installers.controller.netop-manager.io
spec:
  group: controller.netop-manager.io
  names:
    kind: Installer
    listKind: InstallerList
    plural: installers
    singular: installer
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Date
      type: date
    - description: State/Phase of Installer
      jsonPath: .status.operatorStatus
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Installer is the Schema for the installers API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: InstallerSpec defines the desired state of Installer.
            properties:
              config:
                properties:
                  connectivityChecker:
                    properties:
                      checkerCR:
                        type: string
                      checkerCRD:
                        type: string
                      errorPodsReportingCR:
                        type: string
                    type: object
                  networkFunctions:
                    additionalProperties:
                      properties:
                        arrayOptions:
                          additionalProperties:
                            items:
                              type: string
                            type: array
                          type: object
                        options:
                          additionalProperties:
                            type: string
                          type: object
                        type:
                          type: string
                        version:
                          type: string
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    description: NetworkFunctions/Operators
                    type: object
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            description: InstallerStatus defines the observed state of Installer.
            properties:
              clusterOverview:
                additionalProperties:
                  type: integer
                description: store count of nodes, ns, pods & services
                type: object
              componentStatus:
                additionalProperties:
                  properties:
                    state:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: object
              observedGeneration:
                format: int64
                type: integer
              operatorStatus:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: netop-manager-controller-manager
  namespace: netop-manager-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: netop-manager-leader-election-role
  namespace: netop-manager-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: netop-manager-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - events
  - namespaces
  - nodes
  - pods
  - podtemplates
  - secrets
  - serviceaccounts
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controller.netop-manager.io
  resources:
  - installers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controller.netop-manager.io
  resources:
  - installers/finalizers
  verbs:
  - update
- apiGroups:
  - controller.netop-manager.io
  resources:
  - installers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - nettools.debug
  resources:
  - connectivitycheckers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - nettools.debug
  resources:
  - connectivitycheckers/finalizers
  verbs:
  - update
- apiGroups:
  - nettools.debug
  resources:
  - connectivitycheckers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - cniops
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - cniops/finalizers
  verbs:
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - cniops/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - gitops
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - gitops/finalizers
  verbs:
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - gitops/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - amazoncloudintegrations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - amazoncloudintegrations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - apiservers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - apiservers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - applicationlayers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - applicationlayers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - authentications
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - authentications/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - compliances
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - compliances/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - installations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - installations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - intrusiondetections
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - intrusiondetections/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - logcollectors
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - logcollectors/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - logstorages
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - logstorages/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - managementclusterconnections
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - managementclusterconnections/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - managers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - managers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - monitors
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - monitors/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - projectcalico.org
  resources:
  - bgpconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - projectcalico.org
  resources:
  - bgpconfigurations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - projectcalico.org
  resources:
  - bgppeers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - projectcalico.org
  resources:
  - bgppeers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrole
  - clusterrolebinding
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  - clusterroles
  - rolebindings
  - roles
  verbs:
  - bind
  - create
  - delete
  - escalate
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: netop-manager-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: netop-manager-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: netop-manager-leader-election-rolebinding
  namespace: netop-manager-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: netop-manager-leader-election-role
subjects:
- kind: ServiceAccount
  name: netop-manager-controller-manager
  namespace: netop-manager-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: netop-manager-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: netop-manager-manager-role
subjects:
- kind: ServiceAccount
  name: netop-manager-controller-manager
  namespace: netop-manager-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: netop-manager-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: netop-manager-proxy-role
subjects:
- kind: ServiceAccount
  name: netop-manager-controller-manager
  namespace: netop-manager-system
---
apiVersion: v1
data:
  cniconfig.yaml: |-
    cniConfig:
      cko-cni-calico:
      - "01-calico.conflist"
      - "01-calico.conf"
      - "10-calico.conflist"
      - "10-calico.conf"
      cko-cni-aci:
      - "01-opflex-cni.conf"
      - "10-opflex-cni.conf"
kind: ConfigMap
metadata:
  name: netop-manager-cni-config
  namespace: netop-manager-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 51681485.netop-manager.io
    # leaderElectionReleaseOnCancel: true
kind: ConfigMap
metadata:
  name: netop-manager-manager-config
  namespace: netop-manager-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: netop-manager-controller-manager-metrics-service
  namespace: netop-manager-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: netop-manager-controller-manager
  namespace: netop-manager-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: SYSTEM_ID
          value: calico-cni
        - name: HTTP_PROXY
          value: http://proxy.esl.cisco.com:80
        - name: HTTPS_PROXY
          value: http://proxy.esl.cisco.com:80
        - name: NO_PROXY
          value: 10.96.0.1
        - name: SERVER_IP
          valueFrom:
            configMapKeyRef:
              key: serverIP
              name: websocket-config
              optional: true
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              key: serverPort
              name: websocket-config
              optional: true
        image: quay.io/noirolabs/netop-manager:latest
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: 500m
            memory: 128Mi
        securityContext:
          capabilities:
            add:
            - SYS_ADMIN
            - NET_ADMIN
            - SYS_PTRACE
            - NET_RAW
          privileged: true
        volumeMounts:
        - mountPath: /mnt/cni-bin
          name: cni-bin
        - mountPath: /mnt/cni-conf
          name: cni-conf
        - mountPath: /mnt/cni-config
          name: cni-config-volume
        - mountPath: /config.yaml
          name: status-config-volume
          subPath: config.yaml
      hostNetwork: true
      securityContext:
        runAsNonRoot: false
      serviceAccountName: netop-manager-controller-manager
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
        tolerationSeconds: 60
      - effect: NoSchedule
        key: node.kubernetes.io/not-ready
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      volumes:
      - hostPath:
          path: /opt
        name: cni-bin
      - hostPath:
          path: /etc
        name: cni-conf
      - configMap:
          name: netop-manager-cni-config
          optional: true
        name: cni-config-volume
      - configMap:
          name: status-config
          optional: true
        name: status-config-volume
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cni-config
  namespace: netop-manager-system
data:
  cniconfig.yaml: |-
    cniConfig:
      cko-cni-calico:
      - "01-calico.conflist"
      - "01-calico.conf"
      - "10-calico.conflist"
      - "10-calico.conf"
      cko-cni-aci:
      - "01-opflex-cni.conf"
      - "10-opflex-cni.conf"
      cko-cni-cilium:
      - "05-cilium.conf"
      cko-cni-awsvpc:
      - "10-aws.conflist"
      - "10-aws.conf"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: status-config
  namespace: netop-manager-system
data:
    config.yaml: |-
      # pod_name: ""
      system_id: "a-cluster"
      namespace: "netop-manager-system"
      status:
        resourcelabelKey: "netop-manager-resource"
        sleepduration: 60
        resources:
        - namespace: "nettools"
          name: "connectivitycheckers.nettools.debug"
        - namespace: ""
          name: "installer.controller.netop-manager.io"
        - namespace: ""
          name: "cniops.network-function.netop-manager.io"
        - namespace: ""
          name: "gitops.network-function.netop-manager.io"
        - namespace: ""
          name: "loadbalancerops.network-function.netop-manager.io"
        - namespace: ""
          name: "monitoringops.network-function.netop-manager.io"
        - namespace: ""
          name: "servicemeshops.network-function.netop-manager.io"
      git:
        repo: "github.com/test/test_repo.git"
        dir: "test_dir"
        branch: "test"
        token: "7fspWC6rSV"
        user: "test-user"
        email: "test@cisco.com"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: websocket-config
  namespace: netop-manager-system
data:
  serverIP: "10.96.101.1"
  serverPort: "1234"

---
apiVersion: netop-manager.cntrlr.netop-manager.io/v1alpha1
kind: Installer
metadata:
  name: installer-calico-cni
spec:
  config:
    connectivityCheck:
      checkerCRDs: 
      checkerCR: 
      errorPodsReportingCR: 
    networkFunctions:
      cko-cni:
        version: "5.2.3.3"
        type: "cko-cni-calico"
        options:
          calico-crds: 
          calico-cr: IyBUaGlzIHNlY3Rpb24gaW5jbHVkZXMgYmFzZSBDYWxpY28gaW5zdGFsbGF0aW9uIGNvbmZpZ3VyYXRpb24uCiMgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZTogaHR0cHM6Ly9kb2NzLnByb2plY3RjYWxpY28ub3JnL3YzLjIxL3JlZmVyZW5jZS9pbnN0YWxsYXRpb24vYXBpI29wZXJhdG9yLnRpZ2VyYS5pby92MS5JbnN0YWxsYXRpb24KYXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIG5hbWU6IGNhbGljby1zeXN0ZW0KICBsYWJlbHM6CiAgICBuYW1lOiBjYWxpY28tc3lzdGVtCi0tLQphcGlWZXJzaW9uOiBvcGVyYXRvci50aWdlcmEuaW8vdjEKa2luZDogSW5zdGFsbGF0aW9uCm1ldGFkYXRhOgogIG5hbWU6IGRlZmF1bHQKc3BlYzoKICAjIENvbmZpZ3VyZXMgQ2FsaWNvIG5ldHdvcmtpbmcuCiAgY2FsaWNvTmV0d29yazoKICAgICMgTm90ZTogVGhlIGlwUG9vbHMgc2VjdGlvbiBjYW5ub3QgYmUgbW9kaWZpZWQgcG9zdC1pbnN0YWxsLgogICAgaXBQb29sczoKICAgIC0gYmxvY2tTaXplOiAyNgogICAgICBjaWRyOiAyMC4yLjAuMC8xNgogICAgICBlbmNhcHN1bGF0aW9uOiBOb25lCiAgICAgIG5hdE91dGdvaW5nOiBEaXNhYmxlZAogICAgICBub2RlU2VsZWN0b3I6IGFsbCgpCi0tLQojIFRoaXMgc2VjdGlvbiBjb25maWd1cmVzIHRoZSBDYWxpY28gQVBJIHNlcnZlci4KIyBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlOiBodHRwczovL2RvY3MucHJvamVjdGNhbGljby5vcmcvdjMuMjEvcmVmZXJlbmNlL2luc3RhbGxhdGlvbi9hcGkjb3BlcmF0b3IudGlnZXJhLmlvL3YxLkFQSVNlcnZlcgphcGlWZXJzaW9uOiBvcGVyYXRvci50aWdlcmEuaW8vdjEKa2luZDogQVBJU2VydmVyIAptZXRhZGF0YTogCiAgbmFtZTogZGVmYXVsdCAKc3BlYzoge30KLS0tCiNUaGlzIGNyZWF0ZXMgYSBzZWNyZXQgdG8gc3RvcmUgdGhlIEJHUCBQYXNzd29yZC4gV2UgYWxzbyBuZWVkIHRvIGFkZCBhIFJvbGVhbmQgUm9sZUJpbmRpbmcgdG8gZW5zdXJlIHRoZSBjYWxpY28tbm9kZSBTZXJ2aWNlQWNjb3VudCBjYW4gYWNjZXNzIHRoZSBTZWNyZXQuCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lOiBiZ3Atc2VjcmV0cwogIG5hbWVzcGFjZTogY2FsaWNvLXN5c3RlbQp0eXBlOiBPcGFxdWUKc3RyaW5nRGF0YToKICByci1wYXNzd29yZDogdGVzdAotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBSb2xlCm1ldGFkYXRhOgogIG5hbWU6IHNlY3JldC1hY2Nlc3MKICBuYW1lc3BhY2U6IGNhbGljby1zeXN0ZW0KcnVsZXM6Ci0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbInNlY3JldHMiXQogIHJlc291cmNlTmFtZXM6IFsiYmdwLXNlY3JldHMiXQogIHZlcmJzOiBbIndhdGNoIiwgImxpc3QiLCAiZ2V0Il0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogc2VjcmV0LWFjY2VzcwogIG5hbWVzcGFjZTogY2FsaWNvLXN5c3RlbQpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogUm9sZQogIG5hbWU6IHNlY3JldC1hY2Nlc3MKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBjYWxpY28tbm9kZQogIG5hbWVzcGFjZTogY2FsaWNvLXN5c3RlbQotLS0=
          calico-bgp: I1RoaXMgc2VjdGlvbiBkaXNhYmxlcyBCR1AgZnVsbCBtZXNoIGJldHdlZW4gdGhlIEs4cyBub2RlcyBhbmQgc2V0IHRoZSBzZXJ2aWNlQ2x1c3RlcklQcyBhbmQgc2VydmljZUV4dGVybmFsSVBzIHN1Ym5ldHMgc28gdGhhdCB0aGV5IGNhbiBiZSBhZHZlcnRpc2VkIGJ5IGVCR1AuIFRoZXNlIHN1Ym5ldHMgYXJlIHRoZSBTZXJ2aWNlIGFuZCBFeHRlcm5hbCBTZXJ2aWNlIHN1Ym5ldHMgaW4gS3ViZXJuZXRlcy4KYXBpVmVyc2lvbjogcHJvamVjdGNhbGljby5vcmcvdjMKa2luZDogQkdQQ29uZmlndXJhdGlvbgptZXRhZGF0YToKICBuYW1lOiBkZWZhdWx0CnNwZWM6CiAgYXNOdW1iZXI6IDY0NTEyCiAgbG9nU2V2ZXJpdHlTY3JlZW46IEluZm8KICBub2RlVG9Ob2RlTWVzaEVuYWJsZWQ6IGZhbHNlCiAgc2VydmljZUNsdXN0ZXJJUHM6CiAgLSBjaWRyOiAxMC45Ni4wLjAvMTIKICBzZXJ2aWNlRXh0ZXJuYWxJUHM6CiAgLSBjaWRyOiAyMC4zLjAuMC8xNgogIHNlcnZpY2VMb2FkQmFsYW5jZXJJUHM6CiAgLSBjaWRyOiAyMC4zLjAuMC8xNgotLS0KYXBpVmVyc2lvbjogcHJvamVjdGNhbGljby5vcmcvdjMKa2luZDogQkdQUGVlcgptZXRhZGF0YTogCiAgbmFtZTogMi0xMDAtMTAxLTIwMQpzcGVjOgogIHBlZXJJUDogMi4xMDAuMTAxLjIwMQogIGFzTnVtYmVyOiAyCiAgbm9kZVNlbGVjdG9yOiByYWNrX2lkID09ICIxIgogIHBhc3N3b3JkOgogICAgc2VjcmV0S2V5UmVmOgogICAgICBuYW1lOiBiZ3Atc2VjcmV0cwogICAgICBrZXk6IHJyLXBhc3N3b3JkCgotLS0KYXBpVmVyc2lvbjogcHJvamVjdGNhbGljby5vcmcvdjMKa2luZDogQkdQUGVlcgptZXRhZGF0YTogCiAgbmFtZTogMi0xMDAtMTAxLTIwMgpzcGVjOgogIHBlZXJJUDogMi4xMDAuMTAxLjIwMgogIGFzTnVtYmVyOiAyCiAgbm9kZVNlbGVjdG9yOiByYWNrX2lkID09ICIxIgogIHBhc3N3b3JkOgogICAgc2VjcmV0S2V5UmVmOgogICAgICBuYW1lOiBiZ3Atc2VjcmV0cwogICAgICBrZXk6IHJyLXBhc3N3b3JkCgotLS0KYXBpVmVyc2lvbjogcHJvamVjdGNhbGljby5vcmcvdjMKa2luZDogQkdQUGVlcgptZXRhZGF0YTogCiAgbmFtZTogMi0xMDAtMTAxLTIwMwpzcGVjOgogIHBlZXJJUDogMi4xMDAuMTAxLjIwMwogIGFzTnVtYmVyOiAyCiAgbm9kZVNlbGVjdG9yOiByYWNrX2lkID09ICIyIgogIHBhc3N3b3JkOgogICAgc2VjcmV0S2V5UmVmOgogICAgICBuYW1lOiBiZ3Atc2VjcmV0cwogICAgICBrZXk6IHJyLXBhc3N3b3JkCgotLS0KYXBpVmVyc2lvbjogcHJvamVjdGNhbGljby5vcmcvdjMKa2luZDogTm9kZQptZXRhZGF0YToKICBuYW1lOiBrOHMtbm9kZTEKICBsYWJlbHM6CiAgICByYWNrX2lkOiAiMSIKLS0tCmFwaVZlcnNpb246IHByb2plY3RjYWxpY28ub3JnL3YzCmtpbmQ6IE5vZGUKbWV0YWRhdGE6CiAgbmFtZTogazhzLW5vZGUyCiAgbGFiZWxzOgogICAgcmFja19pZDogIjEiCi0tLQphcGlWZXJzaW9uOiBwcm9qZWN0Y2FsaWNvLm9yZy92MwpraW5kOiBOb2RlCm1ldGFkYXRhOgogIG5hbWU6IGs4cy1ub2RlMwogIGxhYmVsczoKICAgIHJhY2tfaWQ6ICIyIgotLS0KYXBpVmVyc2lvbjogcHJvamVjdGNhbGljby5vcmcvdjMKa2luZDogTm9kZQptZXRhZGF0YToKICBuYW1lOiBrOHMtbm9kZTQKICBsYWJlbHM6CiAgICByYWNrX2lkOiAiMiI=
          calicoctl: YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvY3RsCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQoKLS0tCgphcGlWZXJzaW9uOiB2MQpraW5kOiBQb2QKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvY3RsCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQpzcGVjOgogIG5vZGVTZWxlY3RvcjoKICAgIGt1YmVybmV0ZXMuaW8vb3M6IGxpbnV4CiAgaG9zdE5ldHdvcms6IHRydWUKICBzZXJ2aWNlQWNjb3VudE5hbWU6IGNhbGljb2N0bAogIGNvbnRhaW5lcnM6CiAgLSBuYW1lOiBjYWxpY29jdGwKICAgIGltYWdlOiBjYWxpY28vY3RsOnYzLjIzLjIKICAgIGNvbW1hbmQ6CiAgICAgIC0gL2NhbGljb2N0bAogICAgYXJnczoKICAgICAgLSB2ZXJzaW9uCiAgICAgIC0gLS1wb2xsPTFtCiAgICBlbnY6CiAgICAtIG5hbWU6IERBVEFTVE9SRV9UWVBFCiAgICAgIHZhbHVlOiBrdWJlcm5ldGVzCgotLS0KCmtpbmQ6IENsdXN0ZXJSb2xlCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvY3RsCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gbmFtZXNwYWNlcwogICAgICAtIG5vZGVzCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAgICAgLSBsaXN0CiAgICAgIC0gdXBkYXRlCiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczoKICAgICAgLSBub2Rlcy9zdGF0dXMKICAgIHZlcmJzOgogICAgICAtIHVwZGF0ZQogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gcG9kcwogICAgICAtIHNlcnZpY2VhY2NvdW50cwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgICAgIC0gbGlzdAogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gcG9kcy9zdGF0dXMKICAgIHZlcmJzOgogICAgICAtIHVwZGF0ZQogIC0gYXBpR3JvdXBzOiBbImNyZC5wcm9qZWN0Y2FsaWNvLm9yZyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gYmdwcGVlcnMKICAgICAgLSBiZ3Bjb25maWd1cmF0aW9ucwogICAgICAtIGNsdXN0ZXJpbmZvcm1hdGlvbnMKICAgICAgLSBmZWxpeGNvbmZpZ3VyYXRpb25zCiAgICAgIC0gZ2xvYmFsbmV0d29ya3BvbGljaWVzCiAgICAgIC0gZ2xvYmFsbmV0d29ya3NldHMKICAgICAgLSBpcHBvb2xzCiAgICAgIC0gaXByZXNlcnZhdGlvbnMKICAgICAgLSBrdWJlY29udHJvbGxlcnNjb25maWd1cmF0aW9ucwogICAgICAtIG5ldHdvcmtwb2xpY2llcwogICAgICAtIG5ldHdvcmtzZXRzCiAgICAgIC0gaG9zdGVuZHBvaW50cwogICAgICAtIGlwYW1ibG9ja3MKICAgICAgLSBibG9ja2FmZmluaXRpZXMKICAgICAgLSBpcGFtaGFuZGxlcwogICAgICAtIGlwYW1jb25maWdzCiAgICB2ZXJiczoKICAgICAgLSBjcmVhdGUKICAgICAgLSBnZXQKICAgICAgLSBsaXN0CiAgICAgIC0gdXBkYXRlCiAgICAgIC0gZGVsZXRlCiAgLSBhcGlHcm91cHM6IFsibmV0d29ya2luZy5rOHMuaW8iXQogICAgcmVzb3VyY2VzOgogICAgICAtIG5ldHdvcmtwb2xpY2llcwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgICAgIC0gbGlzdAoKLS0tCgphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBjYWxpY29jdGwKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2FsaWNvY3RsCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogY2FsaWNvY3RsCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQ==
