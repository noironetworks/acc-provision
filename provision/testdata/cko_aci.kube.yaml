apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: netop-manager-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: cniops.network-function.netop-manager.io
spec:
  group: network-function.netop-manager.io
  names:
    kind: CniOps
    listKind: CniOpsList
    plural: cniops
    singular: cniops
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    - description: State/Phase of Installer
      jsonPath: .status.operatorStatus
      name: Phase
      type: string
    - description: Cni Type
      jsonPath: .status.cniType
      name: CNI-Type
      type: string
    - description: Cni Version
      jsonPath: .status.cniVersion
      name: CNI-Version
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: CniOps is the Schema for the cniops API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CniOpsSpec defines the desired state of CniOps.
            properties:
              config:
                properties:
                  workload:
                    description: First key should be internal child api
                    properties:
                      options:
                        additionalProperties:
                          type: string
                        type: object
                      type:
                        type: string
                      unmanaged:
                        type: boolean
                      version:
                        type: string
                    required:
                    - type
                    - version
                    type: object
                type: object
            type: object
          status:
            description: CniOpsStatus defines the observed state of CniOps.
            properties:
              cniStatus:
                additionalProperties:
                  type: string
                type: object
              cniType:
                type: string
              cniVersion:
                type: string
              internalState:
                type: string
              ipam:
                type: string
              managedState:
                type: string
              observedGeneration:
                format: int64
                type: integer
              operatorStatus:
                type: string
              upgradeStatus:
                properties:
                  cniUpgradeState:
                    type: string
                  currentVersion:
                    type: string
                  previousVersion:
                    type: string
                type: object
              workloadCheck:
                additionalProperties:
                  type: string
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: diagnosticops.network-function.netop-manager.io
spec:
  group: network-function.netop-manager.io
  names:
    kind: DiagnosticOps
    listKind: DiagnosticOpsList
    plural: diagnosticops
    singular: diagnosticops
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: DiagnosticOps is the Schema for the diagnosticops API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: DiagnosticOpsSpec defines the desired state of DiagnosticOps.
            properties:
              config:
                properties:
                  workload:
                    description: First key should be internal child api
                    properties:
                      options:
                        additionalProperties:
                          type: string
                        type: object
                      type:
                        type: string
                      unmanaged:
                        type: boolean
                      version:
                        type: string
                    required:
                    - type
                    - version
                    type: object
                type: object
            type: object
          status:
            description: DiagnosticOpsStatus defines the observed state of DiagnosticOps.
            properties:
              gStatus:
                additionalProperties:
                  type: string
                type: object
              gType:
                enum:
                - cko-connectivityChecker
                type: string
              observedGeneration:
                format: int64
                type: integer
              state:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: gitops.network-function.netop-manager.io
spec:
  group: network-function.netop-manager.io
  names:
    kind: GitOps
    listKind: GitOpsList
    plural: gitops
    singular: gitops
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: GitOps is the Schema for the gitops API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: GitOpsSpec defines the desired state of GitOps.
            properties:
              config:
                properties:
                  workload:
                    description: First key should be internal child api
                    properties:
                      options:
                        additionalProperties:
                          type: string
                        type: object
                      type:
                        type: string
                      unmanaged:
                        type: boolean
                      version:
                        type: string
                    required:
                    - type
                    - version
                    type: object
                type: object
            type: object
          status:
            description: GitOpsStatus defines the observed state of GitOps.
            properties:
              gStatus:
                additionalProperties:
                  type: string
                type: object
              gType:
                enum:
                - cko-g-argo
                type: string
              observedGeneration:
                format: int64
                type: integer
              state:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: installers.controller.netop-manager.io
spec:
  group: controller.netop-manager.io
  names:
    kind: Installer
    listKind: InstallerList
    plural: installers
    singular: installer
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.creationTimestamp
      name: Date
      type: date
    - description: State/Phase of Installer
      jsonPath: .status.operatorStatus
      name: Phase
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Installer is the Schema for the installers API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: InstallerSpec defines the desired state of Installer.
            properties:
              networkFunctions:
                properties:
                  networking:
                    additionalProperties:
                      properties:
                        arrayOptions:
                          additionalProperties:
                            items:
                              type: string
                            type: array
                          type: object
                        managedComponent:
                          default: false
                          description: ManagedComponent field is ignored for platform components and must be set to true to manage networking component.
                          type: boolean
                        options:
                          additionalProperties:
                            type: string
                          type: object
                        type:
                          type: string
                        version:
                          type: string
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    type: object
                  platform:
                    additionalProperties:
                      properties:
                        arrayOptions:
                          additionalProperties:
                            items:
                              type: string
                            type: array
                          type: object
                        managedComponent:
                          default: false
                          description: ManagedComponent field is ignored for platform components and must be set to true to manage networking component.
                          type: boolean
                        options:
                          additionalProperties:
                            type: string
                          type: object
                        type:
                          type: string
                        version:
                          type: string
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    type: object
                type: object
                x-kubernetes-preserve-unknown-fields: true
            type: object
          status:
            description: InstallerStatus defines the observed state of Installer.
            properties:
              clusterOverview:
                additionalProperties:
                  type: integer
                description: store count of nodes, ns, pods & services
                type: object
              componentStatus:
                additionalProperties:
                  properties:
                    state:
                      type: string
                    status:
                      type: string
                    type:
                      type: string
                  type: object
                type: object
              observedGeneration:
                format: int64
                type: integer
              operatorStatus:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.9.2
  creationTimestamp: null
  name: observedops.network-function.netop-manager.io
spec:
  group: network-function.netop-manager.io
  names:
    kind: ObservedOps
    listKind: ObservedOpsList
    plural: observedops
    singular: observedops
  scope: Cluster
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ObservedOps is the Schema for the observedops API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ObservedOpsSpec defines the desired state of ObservedOps.
            properties:
              cniConfPath:
                default:
                - cni/net.d
                - /kubernetes/cni/net.d
                items:
                  type: string
                type: array
              cniMountPath:
                default: /mnt/cni-conf
                type: string
              forceReconcile:
                type: integer
            type: object
          status:
            description: ObservedOpsStatus defines the observed state of ObservedOps.
            properties:
              Multus:
                type: boolean
              cniType:
                type: string
              cniVersion:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: netop-manager-controller-manager
  namespace: netop-manager-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: netop-manager-leader-election-role
  namespace: netop-manager-system
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: netop-manager-manager-role
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - events
  - namespaces
  - nodes
  - pods
  - podtemplates
  - secrets
  - serviceaccounts
  - services
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods/exec
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - statefulsets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controller.netop-manager.io
  resources:
  - installers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - controller.netop-manager.io
  resources:
  - installers/finalizers
  verbs:
  - update
- apiGroups:
  - controller.netop-manager.io
  resources:
  - installers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - nettools.debug
  resources:
  - connectivitycheckers
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - nettools.debug
  resources:
  - connectivitycheckers/finalizers
  verbs:
  - update
- apiGroups:
  - nettools.debug
  resources:
  - connectivitycheckers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - cniops
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - cniops/finalizers
  verbs:
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - cniops/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - diagnosticops
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - diagnosticops/finalizers
  verbs:
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - diagnosticops/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - gitops
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - gitops/finalizers
  verbs:
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - gitops/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - observedops
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - observedops/finalizers
  verbs:
  - update
- apiGroups:
  - network-function.netop-manager.io
  resources:
  - observedops/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - amazoncloudintegrations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - amazoncloudintegrations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - apiservers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - apiservers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - applicationlayers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - applicationlayers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - authentications
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - authentications/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - compliances
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - compliances/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - installations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - installations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - intrusiondetections
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - intrusiondetections/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - logcollectors
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - logcollectors/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - logstorages
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - logstorages/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - managementclusterconnections
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - managementclusterconnections/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - managers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - managers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - operator.tigera.io
  resources:
  - monitors
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - operator.tigera.io
  resources:
  - monitors/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - policy
  resources:
  - podsecuritypolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - projectcalico.org
  resources:
  - bgpconfigurations
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - projectcalico.org
  resources:
  - bgpconfigurations/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - projectcalico.org
  resources:
  - bgppeers
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - projectcalico.org
  resources:
  - bgppeers/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrole
  - clusterrolebinding
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - clusterrolebindings
  - clusterroles
  - rolebindings
  - roles
  verbs:
  - bind
  - create
  - delete
  - escalate
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: netop-manager-metrics-reader
rules:
- nonResourceURLs:
  - /metrics
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: netop-manager-proxy-role
rules:
- apiGroups:
  - authentication.k8s.io
  resources:
  - tokenreviews
  verbs:
  - create
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: netop-manager-leader-election-rolebinding
  namespace: netop-manager-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: netop-manager-leader-election-role
subjects:
- kind: ServiceAccount
  name: netop-manager-controller-manager
  namespace: netop-manager-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: netop-manager-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: netop-manager-manager-role
subjects:
- kind: ServiceAccount
  name: netop-manager-controller-manager
  namespace: netop-manager-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: netop-manager-proxy-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: netop-manager-proxy-role
subjects:
- kind: ServiceAccount
  name: netop-manager-controller-manager
  namespace: netop-manager-system
---
apiVersion: v1
data:
  controller_manager_config.yaml: |
    apiVersion: controller-runtime.sigs.k8s.io/v1alpha1
    kind: ControllerManagerConfig
    health:
      healthProbeBindAddress: :8081
    metrics:
      bindAddress: 127.0.0.1:8080
    webhook:
      port: 9443
    leaderElection:
      leaderElect: true
      resourceName: 51681485.netop-manager.io
    # leaderElectionReleaseOnCancel: true
kind: ConfigMap
metadata:
  name: netop-manager-manager-config
  namespace: netop-manager-system
---
apiVersion: v1
kind: Service
metadata:
  labels:
    control-plane: controller-manager
  name: netop-manager-controller-manager-metrics-service
  namespace: netop-manager-system
spec:
  ports:
  - name: https
    port: 8443
    protocol: TCP
    targetPort: https
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: netop-manager-controller-manager
  namespace: netop-manager-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - args:
        - --secure-listen-address=0.0.0.0:8443
        - --upstream=http://127.0.0.1:8080/
        - --logtostderr=true
        - --v=0
        image: gcr.io/kubebuilder/kube-rbac-proxy:v0.13.0
        name: kube-rbac-proxy
        ports:
        - containerPort: 8443
          name: https
          protocol: TCP
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 5m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        command:
        - /manager
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: SYSTEM_ID
          value: bm2acicni
        - name: HTTP_PROXY
          value: http://proxy.esl.cisco.com:80
        - name: HTTPS_PROXY
          value: http://proxy.esl.cisco.com:80
        - name: NO_PROXY
          value: 10.96.0.1
        - name: SERVER_IP
          valueFrom:
            configMapKeyRef:
              key: serverIP
              name: websocket-config
              optional: true
        - name: SERVER_PORT
          valueFrom:
            configMapKeyRef:
              key: serverPort
              name: websocket-config
              optional: true
        - name: GIT_REPO
          valueFrom:
            secretKeyRef:
              key: repo
              name: git-config
              optional: true
        - name: GIT_DIR
          valueFrom:
            secretKeyRef:
              key: dir
              name: git-config
              optional: true
        - name: GIT_BRANCH
          valueFrom:
            secretKeyRef:
              key: branch
              name: git-config
              optional: true
        - name: GIT_TOKEN
          valueFrom:
            secretKeyRef:
              key: token
              name: git-config
              optional: true
        - name: GIT_USER
          valueFrom:
            secretKeyRef:
              key: user
              name: git-config
              optional: true
        - name: GIT_EMAIL
          valueFrom:
            secretKeyRef:
              key: email
              name: git-config
              optional: true
        image: quay.io/ckodev/netop-manager:0.9.0.d04f56f
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 20
        name: manager
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: 500m
            memory: 128Mi
        securityContext:
          capabilities:
            add:
            - SYS_ADMIN
            - NET_ADMIN
            - SYS_PTRACE
            - NET_RAW
          privileged: true
        volumeMounts:
        - mountPath: /mnt/cni-bin
          name: cni-bin
        - mountPath: /mnt/cni-conf
          name: cni-conf
        - mountPath: /mnt/cni-config
          name: cni-config-volume
      hostNetwork: true
      securityContext:
        runAsNonRoot: false
      serviceAccountName: netop-manager-controller-manager
      terminationGracePeriodSeconds: 30
      tolerations:
      - effect: NoSchedule
        operator: Exists
      - effect: NoExecute
        operator: Exists
        tolerationSeconds: 60
      - effect: NoSchedule
        key: node.kubernetes.io/not-ready
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      volumes:
      - hostPath:
          path: /opt
        name: cni-bin
      - hostPath:
          path: /etc
        name: cni-conf
      - configMap:
          name: netop-manager-cni-config
          optional: true
        name: cni-config-volume
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cni-config
  namespace: netop-manager-system
data:
  cniconfig.yaml: |-
    cniConfig:
      cko-cni-calico:
      - "01-calico.conflist"
      - "01-calico.conf"
      - "10-calico.conflist"
      - "10-calico.conf"
      cko-cni-aci:
      - "01-opflex-cni.conf"
      - "10-opflex-cni.conf"
      cko-cni-cilium:
      - "05-cilium.conf"
      cko-cni-awsvpc:
      - "10-aws.conflist"
      - "10-aws.conf"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: websocket-config
  namespace: netop-manager-system
data:
  serverIP: "10.96.101.1"
  serverPort: "1234"

---
apiVersion: controller.netop-manager.io/v1alpha1
kind: Installer
metadata:
  name: installer-aci-cni
spec:
  networkFunctions:
    networking:
      cko-cni:
        version: "5.2.3.3"
        type: "cko-cni-aci"
        options:
          aci-cni-specs: 
  platform:
    cko-diagnostic:
      type: "connectivity-checker"
      version: "0.1"
      options:
        01-checkerCRDs: 
        02-checkerCR: LS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBjb25uZWN0aXZpdHljaGVja2Vycy5uZXR0b29scy5kZWJ1ZwpzcGVjOgogIGdyb3VwOiBuZXR0b29scy5kZWJ1ZwogIG5hbWVzOgogICAga2luZDogQ29ubmVjdGl2aXR5Q2hlY2tlcgogICAgbGlzdEtpbmQ6IENvbm5lY3Rpdml0eUNoZWNrZXJMaXN0CiAgICBwbHVyYWw6IGNvbm5lY3Rpdml0eWNoZWNrZXJzCiAgICBzaW5ndWxhcjogY29ubmVjdGl2aXR5Y2hlY2tlcgogICAgc2hvcnROYW1lczoKICAgIC0gY29ubmNoZWNrCiAgICAtIHJlYWNoY2hlY2sKICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb25zOgogIC0gbmFtZTogdjFhbHBoYTEKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQogICAgc2NoZW1hOgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgZGVzY3JpcHRpb246IENvbm5lY3Rpdml0eUNoZWNrZXIgZGVmaW5lcyB0aGUgcmVhY2hhYmlsaXR5IHRlc3QgcmVzdWx0cyBvZiBhbGwgcG9kcy4KICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDb25uZWN0aXZpdHlDaGVja2VyU3BlYyBkZWZpbmVzIHRoZSByZXN1bHRzIG9mIHZhcmlvdXMgcmVhY2hhYmlsaXR5IHRlc3RzLgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIHJlYWNoYWJpbGl0eV90ZXN0X2VuYWJsZToKICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgcGVyaW9kaWNfc3luYzoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgZW5hYmxlX3VwZGF0ZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgICAgICAgIGludGVydmFsOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDEyMAogICAgICAgICAgICAgICAgICBleHRlcm5hbF91cmw6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIHVybDoKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICdnb29nbGUuY29tJwogICAgICAgICAgICAgICAgICBwcm94eToKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgaHR0cF9wcm94eToKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICBodHRwc19wcm94eToKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgcmVhY2hhYmlsaXR5X3Rlc3RzOgogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBwb2RfdG9fcG9kOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBGcm9tIHNpbmdsZSBidXN5Ym94IGRlcGxveW1lbnQgcG9kLCBjaGVjayByZWFjaGFiaWxpdHkgdG8gYWxsIHRoZSBuZ2lueCBwb2RzLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgcG9kX3RvX25vZGU6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEZyb20gc2luZ2xlIGJ1c3lib3ggZGVwbG95bWVudCBwb2QsIGNoZWNrIHJlYWNoYWJpbGl0eSB0byBhbGwgdGhlIGJ1c3lib3ggZHMgcG9kcyB0aGF0IHJ1biBpbiBob3N0IG5ldHdvcmsuCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9zdGF0dXM6CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZQogICAgICAgICAgICAgICAgICBwb2RfdG9fY2x1c3RlcklQOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBGcm9tIHNpbmdsZSBidXN5Ym94IGRlcGxveW1lbnQgcG9kLCBjaGVjayByZWFjaGFiaWxpdHkgdG8gbmdpbnggc2VydmljZSdzIGNsdXN0ZXJJUC4KICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgdXBkYXRlX3N0YXR1czoKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlCiAgICAgICAgICAgICAgICAgIHBvZF90b19zZXJ2aWNlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBGcm9tIHNpbmdsZSBidXN5Ym94IGRlcGxveW1lbnQgcG9kLCBjaGVjayByZWFjaGFiaWxpdHkgdG8gbmdpbnggc2VydmljZSdzIG5hbWUgdG8gdmVyaWZ5IHJlYWNoYWJpbGl0eSB3aXRoIGRucyByZXNvbHV0aW9uLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgcG9kX3RvX0xCX1ZJUDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRnJvbSBzaW5nbGUgYnVzeWJveCBkZXBsb3ltZW50IHBvZCwgY2hlY2sgcmVhY2hhYmlsaXR5IHRvIG5naW54IHNlcnZpY2UncyBMQiBWSVAuCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9zdGF0dXM6CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZQogICAgICAgICAgICAgICAgICBwb2RfdG9fTm9kZVBvcnQ6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEZyb20gc2luZ2xlIGJ1c3lib3ggZGVwbG95bWVudCBwb2QsIGNoZWNrIHJlYWNoYWJpbGl0eSB0byA6PG5naW54IHNlcnZpY2UncyBub2RlUG9ydD4uCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZV9zdGF0dXM6CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZQogICAgICAgICAgICAgICAgICBwb2RfdG9fRXh0ZXJuYWw6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEZyb20gZWFjaCBuZ2lueCBwb2QsIGNoZWNrIGNvbm5lY3Rpdml0eSB0byBvdXRzaWRlIHdvcmxkLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgbm9kZV90b19ub2RlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDaGVjayBjb25uZWN0aXZpdHkgYmV0d2VlbiBidXN5Ym94IGRzIHBvZHMgdGhhdCBydW4gaW4gaG9zdCBuZXR3b3JrLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgbm9kZV90b19wb2Q6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEZyb20gZWFjaCBidXN5Ym94IGRzIHBvZCB0aGF0IHJ1biBpbiBob3N0IG5ldHdvcmssIGNoZWNrIHJlYWNoYWJpbGl0eSB0byB0aGUgb25seSBidXN5Ym94IGRlcGxveW1lbnQgcG9kLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgbm9kZV90b19jbHVzdGVySVA6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEZyb20gZWFjaCBidXN5Ym94IGRzIHBvZCB0aGF0IHJ1biBpbiBob3N0IG5ldHdvcmssIGNoZWNrIHJlYWNoYWJpbGl0eSB0byBuZ2lueCBzZXJ2aWNlJ3MgY2x1c3RlcklQLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgbm9kZV90b19MQl9WSVA6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEZyb20gZWFjaCBidXN5Ym94IGRzIHBvZCB0aGF0IHJ1biBpbiBob3N0IG5ldHdvcmssIGNoZWNrIHJlYWNoYWJpbGl0eSB0byBuZ2lueCBzZXJ2aWNlJ3MgTEIgVklQLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgbm9kZV90b19Ob2RlUG9ydDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRnJvbSBlYWNoIGJ1c3lib3ggZHMgcG9kIHRoYXQgcnVuIGluIGhvc3QgbmV0d29yaywgY2hlY2sgcmVhY2hhYmlsaXR5IHRvIDo8bmdpbnggc2VydmljZSdzIG5vZGVQb3J0PgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgICAgICAgbm9kZV90b19FeHRlcm5hbDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIEZyb20gZWFjaCBidXN5Ym94IGRzIHBvZCB0aGF0IHJ1biBpbiBob3N0IG5ldHdvcmssIGNoZWNrIGNvbm5lY3Rpdml0eSB0byBvdXRzaWRlIHdvcmxkLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVfc3RhdHVzOgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzdGF0dXM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDb25uZWN0aXZpdHlDaGVja2VyIFN0YXR1cyBkZWZpbmVzIHRoZSBjb21wbGV0ZSByZXN1bHRzIG9mIHRoZSBleHRlcm5hbCByZWFjaGFiaWxpdHkuCiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgdXBkYXRlZF9hdDoKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHJlc3VsdF9jb3VudDoKICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgcGFzc2VkOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgZmFpbGVkOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgc2tpcHBlZDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgcmVzdWx0czoKICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgcG9kX3RvX3BvZDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgcG9kX3RvX25vZGU6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIHBvZF90b19jbHVzdGVySVA6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIHBvZF90b19zZXJ2aWNlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBwb2RfdG9fTEJfVklQOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBwb2RfdG9fTm9kZVBvcnQ6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIHBvZF90b19FeHRlcm5hbDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgbm9kZV90b19ub2RlOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBub2RlX3RvX3BvZDoKICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgbm9kZV90b19jbHVzdGVySVA6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIG5vZGVfdG9fTEJfVklQOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBub2RlX3RvX05vZGVQb3J0OgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBub2RlX3RvX0V4dGVybmFsOgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICByZXF1aXJlZDoKICAgICAgICAtIHNwZWMKICAgICAgICB0eXBlOiBvYmplY3QKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBlcnJvcnBvZHNyZXBvcnRpbmdzLm5ldHRvb2xzLmRlYnVnCnNwZWM6CiAgZ3JvdXA6IG5ldHRvb2xzLmRlYnVnCiAgbmFtZXM6CiAgICBraW5kOiBFcnJvclBvZHNSZXBvcnRpbmcKICAgIGxpc3RLaW5kOiBFcnJvclBvZHNSZXBvcnRpbmdMaXN0CiAgICBwbHVyYWw6IGVycm9ycG9kc3JlcG9ydGluZ3MKICAgIHNpbmd1bGFyOiBlcnJvcnBvZHNyZXBvcnRpbmcKICAgIHNob3J0TmFtZXM6CiAgICAtIGVwcgogICAgLSBlcnJvcnBvZHMKICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb25zOgogIC0gbmFtZTogdjFhbHBoYTEKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQogICAgc2NoZW1hOgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgZGVzY3JpcHRpb246IEVycm9yUG9kc1JlcG9ydGluZyBkZWZpbmVzIGFsbCB0aGUgcG9kcyB3aGljaCBhcmUgaW4gRVJST1Igc3RhdGUKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBFcnJvclBvZHNSZXBvcnRpbmdTcGVjIGRlZmluZXMgdGhlIGZsYWcgdG8gZW5hYmxlL2Rpc2FibGUgdGhlIHJlcG9ydGluZwogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICByZXBvcnRpbmdfZW5hYmxlOgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgc3RhdHVzOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogRXJyb3JQb2RzUmVwb3J0aW5nIFN0YXR1cyBkZWZpbmVzIHRoZSBjb21wbGV0ZSBkZXRhaWxzIG9mIHRoZSBwb2RzIHdoaWNoIGFyZSBpbiBlcnJvciBzdGF0ZS4KICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgdXBkYXRlZF9hdDoKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGVycm9yX3BvZHM6CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICBwb2RfeWFtbDoKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIGV2ZW50czoKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgIHJlcXVpcmVkOgogICAgICAgIC0gc3BlYwogICAgICAgIHR5cGU6IG9iamVjdAotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIG5hbWU6IG5ldHRvb2xzCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lOiBuZXR0b29scy1kZWJ1ZwogIG5hbWVzcGFjZTogbmV0dG9vbHMKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR0b29scwogIG5hbWU6IG5ldHRvb2xzLWRlYnVnCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtIHNlY3VyaXR5Lm9wZW5zaGlmdC5pbwogIHJlc291cmNlTmFtZXM6CiAgLSBob3N0bmV0d29yawogIHJlc291cmNlczoKICAtIHNlY3VyaXR5Y29udGV4dGNvbnN0cmFpbnRzCiAgdmVyYnM6CiAgLSB1c2UKLSBhcGlHcm91cHM6IFsiYXBwcyIsICJuZXR0b29scy5kZWJ1ZyIsICIiXQogIHJlc291cmNlczogWyJub2RlcyIsICJwb2RzIiwgImRlcGxveW1lbnRzIiwgImRhZW1vbnNldHMiLCAic2VydmljZXMiLCAiZW5kcG9pbnRzIiwgImNvbm5lY3Rpdml0eWNoZWNrZXJzIiwgImVycm9ycG9kc3JlcG9ydGluZ3MiLCAiZXZlbnRzIiwgInBvZHMvZXhlYyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giLCAiY3JlYXRlIiwgInVwZGF0ZSIsICJwYXRjaCIsICJkZWxldGUiXQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogbmV0dG9vbHMtZGVidWctcmIKICBuYW1lc3BhY2U6IG5ldHRvb2xzCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogbmV0dG9vbHMtZGVidWcKICBuYW1lc3BhY2U6IG5ldHRvb2xzCnJvbGVSZWY6CiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBuZXR0b29scy1kZWJ1ZwogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogbmV0dG9vbHMtZGVidWcKICBuYW1lc3BhY2U6IG5ldHRvb2xzCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiBuZXR0b29scwogIHJlcGxpY2FzOiAxCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogbmV0dG9vbHMKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogbmV0dG9vbHMtZGVidWcKICAgICAgY29udGFpbmVyczoKICAgICAgLSBuYW1lOiBuZXR0b29scwogICAgICAgIGltYWdlOiBxdWF5LmlvL2Nrb2Rldi9uZXR0b29sczowLjkuMC5kMDRmNTZmCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBBbHdheXMKICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDgwCg==
        03-errorPodsReportingCR: 
