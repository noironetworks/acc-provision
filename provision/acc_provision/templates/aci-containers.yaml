
apiVersion: v1
kind: Namespace
metadata:
  name: aci-containers-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
{% if config.kube_config.system_namespace == "aci-containers-system" %}
    network-plugin: aci-containers
{% endif %}
{% if config.kube_config.use_openshift_run_level %}
    openshift.io/run-level: "0"
{% endif %}
  annotations:
    openshift.io/node-selector: ''
---
{% if config.kube_config.use_aci_anywhere_crd %}
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: epgs.aci.aw
spec:
  group: aci.aw
  names:
    kind: Epg
    listKind: EpgList
    plural: epgs
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: contracts.aci.aw
spec:
  group: aci.aw
  names:
    kind: Contract
    listKind: ContractList
    plural: contracts
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: podifs.aci.aw
spec:
  group: aci.aw
  names:
    kind: PodIF
    listKind: PodIFList
    plural: podifs
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: gbpsstates.aci.aw
spec:
  group: aci.aw
  names:
    kind: GBPSState
    listKind: GBPSStateList
    plural: gbpsstates
  scope: Namespaced
  version: v1
  subresources:
    status: {}
---
{% endif %}
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: snatglobalinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatGlobalInfo
    listKind: SnatGlobalInfoList
    plural: snatglobalinfos
    singular: snatglobalinfo
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: snatpolicies.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatPolicy
    listKind: SnatPolicyList
    plural: snatpolicies
    singular: snatpolicy
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            selector:
              properties:
                labels:
                  type: object
                  properties:
                    additionalProperties:
                      type: string
                namespace:
                  type: string
              type: object
            snatIp:
              type: array
            destIp:
              type: array
          type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: nodeinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: NodeInfo
    listKind: NodeInfoList
    plural: nodeinfos
    singular: nodeinfo
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: rdconfigs.aci.snat
spec:
  group: aci.snat
  names:
    kind: RdConfig
    listKind: RdConfigList
    plural: rdconfigs
    singular: rdconfig
  scope: Namespaced
  version: v1
---
{% if config.istio_config.install_istio %}
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: aciistiooperators.aci.istio
spec:
  group: aci.istio
  names:
    kind: AciIstioOperator
    listKind: AciIstioOperatorList
    plural: aciistiooperators
    singular: aciistiooperator
  scope: Namespaced
  version: v1
---
{% endif %}
apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-containers-config
  namespace: {{ config.kube_config.system_namespace }}
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
data:
  controller-config: |-
    {
        "log-level": {{config.logging.controller_log_level|json}},
        "apic-hosts": {{config.aci_config.apic_hosts|json|indent(width=8)}},
        {% if config.aci_config.apic_refreshtime %}
        "apic-refreshtime": "{{config.aci_config.apic_refreshtime|json}}",
        {% endif %}
        {% if config.flavor != "cloud" %}
        "apic-username": {{config.aci_config.sync_login.username|json}},
        "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
        {% endif %}
        "apic-use-inst-tag": {{config.aci_config.use_inst_tag|json}},
        "aci-prefix": {{config.aci_config.system_id|json}},
        "aci-vmm-type": {{config.aci_config.vmm_domain.type|json}},
        "aci-vmm-domain": {{config.aci_config.vmm_domain.domain|json}},
        "aci-vmm-controller": {{config.aci_config.vmm_domain.controller|json}},
        "aci-policy-tenant": {{config.kube_config.default_endpoint_group.tenant|json}},
        "require-netpol-annot": {{config.kube_config.use_netpol_annotation|json}},
        {% if config.flavor == "cloud" %}
        "apic-username": {{config.aci_config.apic_login.username|json}},
        "apic-password": {{config.aci_config.apic_login.password|json}},
        "lb-type": "None",
        {% endif %}
        {% if config.istio_config.install_istio %}
        "install-istio": {{ config.istio_config.install_istio|json }},
        "istio-profile": {{ config.istio_config.install_profile|json }},
        {% endif %}
        {% if config.flavor != "cloud" %}
        "aci-podbd-dn": {{config.aci_config.pod_bd_dn|json}},
        "aci-nodebd-dn": {{config.aci_config.node_bd_dn|json}},
        {% endif %}
        "aci-service-phys-dom": {{config.aci_config.physical_domain.domain|json}},
        "aci-service-encap": {{ ("vlan-" ~ config.net_config.service_vlan)|json }},
        "aci-service-monitor-interval": {{ config.net_config.service_monitor_interval|json }},
        "aci-pbr-tracking-non-snat": {{ config.net_config.pbr_tracking_non_snat|json }},
        "aci-vrf-tenant": {{config.aci_config.vrf.tenant|json}},
        "aci-l3out": {{config.aci_config.l3out.name|json}},
        "aci-ext-networks": {{ config.aci_config.l3out.external_networks|json|indent(width=8) }},
        {% if config.flavor == "cloud" %}
        "aci-vrf": {{config.aci_config.overlay_vrf|json}},
        {% else %}
        "aci-vrf": {{config.aci_config.vrf.name|json}},
        {% endif %}
        "default-endpoint-group": {
            "policy-space": {{config.kube_config.default_endpoint_group.tenant|json}},
        {% if config.flavor == "cloud" %}
            "name": {{config.kube_config.default_endpoint_group.group|json}}
        {% else %}
            "name": {{(config.kube_config.default_endpoint_group.app_profile ~ "|" ~ config.kube_config.default_endpoint_group.group)|json}}
        {% endif %}
        },
        "max-nodes-svc-graph": {{ config.kube_config.max_nodes_svc_graph|json }},
        "namespace-default-endpoint-group": {
            {% for ns, val in (config.kube_config.namespace_default_endpoint_group.items() | sort) %}
            "{{ns}}": {
                "policy-space": {{val['tenant']|json}},
            {% if config.flavor == "cloud" %}
            "name": {{config.kube_config.default_endpoint_group.group|json}}
            {% else %}
                "name": {{(val['app_profile'] ~ "|" ~ val['group'])|json}}
            {% endif %}
            }{% if not loop.last %},
            {% endif %}{% endfor %}
        },
        "service-ip-pool": {{ config.kube_config.service_ip_pool|json|indent(width=8) }},
        "snat-contract-scope": {{ config.kube_config.snat_operator.contract_scope|json }},
        "static-service-ip-pool": {{ config.kube_config.static_service_ip_pool|json|indent(width=8) }},
        {% if config.kube_config.use_external_service_ip_allocator %}
        "allocate-service-ips": false,
        {% endif %}
        "pod-ip-pool": {{ config.kube_config.pod_ip_pool|json|indent(width=8) }},
        "pod-subnet-chunk-size": {{ config.net_config.pod_subnet_chunk_size|json }},
        "node-service-ip-pool": {{ config.kube_config.node_service_ip_pool|json|indent(width=8) }},
        "node-service-subnets": {{ config.kube_config.node_service_gw_subnets|json|indent(width=8) }}
    }
  host-agent-config: |-
    {
        "ep-registry": {{ config.kube_config.ep_registry|json }},
        "opflex-mode": {{ config.kube_config.opflex_mode|json }},
        "log-level": {{config.logging.hostagent_log_level|json}},
        "aci-snat-namespace": "{{ config.kube_config.snat_operator.snat_namespace }}",
        "aci-vmm-type": {{config.aci_config.vmm_domain.type|json}},
        "aci-vmm-domain": {{config.aci_config.vmm_domain.domain|json}},
        "aci-vmm-controller": {{config.aci_config.vmm_domain.controller|json}},
        "aci-prefix": {{config.aci_config.system_id|json}},
        {% if config.flavor == "cloud" %}
        "aci-vrf": {{config.aci_config.overlay_vrf|json}},
        {% else %}
        "aci-vrf": {{config.aci_config.vrf.name|json}},
        {% endif %}
        "aci-vrf-tenant": {{config.aci_config.vrf.tenant|json}},
        "service-vlan": {{ config.net_config.service_vlan|json }},
        "kubeapi-vlan": {{ config.net_config.kubeapi_vlan|json }},
        "pod-subnet": {{ config.net_config.pod_subnet|json }},
        "node-subnet": {{ config.net_config.node_subnet|json }},
        "encap-type": {{ config.node_config.encap_type|json }},
        "aci-infra-vlan": {{ config.net_config.infra_vlan|json }},
        {% if config.net_config.interface_mtu %}
        "interface-mtu": {{ config.net_config.interface_mtu|json }},
        {% endif %}
        "cni-netconfig": {{ config.kube_config.pod_network|json|indent(width=8) }},
        "default-endpoint-group": {
            "policy-space": {{config.kube_config.default_endpoint_group.tenant|json}},
        {% if config.flavor == "cloud" %}
            "name": {{config.kube_config.default_endpoint_group.group|json}}
        {% else %}
            "name": {{(config.kube_config.default_endpoint_group.app_profile ~ "|" ~ config.kube_config.default_endpoint_group.group)|json}}
        {% endif %}
        },
        "namespace-default-endpoint-group": {
            {% for ns, val in (config.kube_config.namespace_default_endpoint_group.items() | sort) %}
            "{{ns}}": {
                "policy-space": {{val['tenant']|json}},
            {% if config.flavor == "cloud" %}
            "name": {{config.kube_config.default_endpoint_group.group|json}}
            {% else %}
                "name": {{(val['app_profile'] ~ "|" ~ val['group'])|json}}
            {% endif %}
            }{% if not loop.last %},
            {% endif %}{% endfor %}
        },
        {% if config.drop_log_config.enable %}
        "enable-drop-log": true
        {% else %}
        "enable-drop-log": false
        {% endif %}
    }
  opflex-agent-config: |-
    {
        "log": {
            "level": {{config.logging.opflexagent_log_level|json}}
        },
        "opflex": {
          {% if not config.aci_config.client_ssl %}
            "ssl": { "mode": "disabled" }
          {% endif %}
        }
    }
  {% if config.kube_config.run_gbp_container %}
  gbp-server-config: |-
   {
        "aci-policy-tenant": {{config.kube_config.default_endpoint_group.tenant|json}},
        "aci-vrf": {{config.aci_config.overlay_vrf|json}},
        "aci-vmm-domain": {{config.aci_config.vmm_domain.domain|json}},
        {% if config.flavor != "cloud" %}
        "pod-subnet": {{ config.net_config.gbp_pod_subnet|json|indent(width=8) }}
        {% else %}
        "pod-subnet": {{ config.net_config.gbp_pod_subnet|json|indent(width=8) }},
        "apic": {
            "apic-hosts": {{config.aci_config.apic_hosts|json|indent(width=8)}},
            "apic-username": {{config.aci_config.apic_login.username|json}},
            "apic-password": {{config.aci_config.apic_login.password|json}},
            "kafka": {
                "brokers": {{config.aci_config.kafka.brokers|json|indent(width=16)}},
                "client-key-path": "/certs/kafka-client.key",
                "client-cert-path": "/certs/kafka-client.crt",
                "ca-cert-path": "/certs/ca.crt",
                "topic": {{config.aci_config.system_id|json}}
            },
            "cloud-info": {
                "cluster-name": {{config.aci_config.system_id|json}},
                "subnet": {{config.aci_config.subnet_dn|json}},
                "vrf": {{config.aci_config.vrf_dn|json}}
            }
        }
        {% endif %}
   }
   {% endif %}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: snat-operator-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
data:
    "start": "{{config.kube_config.snat_operator.port_range.start}}"
    "end": "{{config.kube_config.snat_operator.port_range.end}}"
    "ports-per-node": "{{config.kube_config.snat_operator.port_range.ports_per_node}}"
---
apiVersion: v1
kind: Secret
metadata:
  name: aci-user-cert
  namespace: {{ config.kube_config.system_namespace }}
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
data:
  user.key: {{config.aci_config.sync_login.key_data|base64enc}}
  user.crt: {{config.aci_config.sync_login.cert_data|base64enc}}
{% if config.flavor == "cloud" %}
---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-client-certificates 
  namespace: {{ config.kube_config.system_namespace }}
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
data:
  ca.crt: {{config.aci_config.kafka.cacert|base64enc}}
  kafka-client.crt: {{config.aci_config.kafka.cert|base64enc}}
  kafka-client.key: {{config.aci_config.kafka.key|base64enc}}
{% endif %}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-controller
  namespace: {{ config.kube_config.system_namespace }}
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-host-agent
  namespace: {{ config.kube_config.system_namespace }}
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
---
{% if config.kube_config.use_cluster_role %}
apiVersion: {{ config.kube_config.use_rbac_api }}
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
  name: aci-containers:controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  {% if not config.kube_config.pod_exec_resources_controller %}
  - pods
  {% else %}
  - pods
  - pods/exec
  {% endif %}
  - endpoints
  - services
  - events
  - replicationcontrollers
{% if config.istio_config.install_istio %}
  - serviceaccounts
{% endif %}
  verbs:
  - list
  - watch
  - get
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
{% if config.istio_config.install_istio %}
- apiGroups:
  - "rbac.authorization.k8s.io"
  resources:
  - clusterroles
  - clusterrolebindings
  verbs:
  - '*'
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - '*'
- apiGroups:
  - "install.istio.io"
  resources:
  - istiocontrolplanes
  - istiooperators
  verbs:
  - '*'
- apiGroups:
  - "aci.istio"
  resources:
  - aciistiooperators
  - aciistiooperator
  verbs:
  - '*'
{% endif %}
- apiGroups:
  - "{{ config.kube_config.use_netpol_apigroup }}"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
{% if config.kube_config.use_aci_anywhere_crd %}
- apiGroups:
  - "aci.aw"
  resources:
  - epgs
  - contracts
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.aw"
  resources:
  - podifs
  - gbpsstates
  - gbpsstates/status
  verbs:
  - '*'
{% endif %}
- apiGroups:
  - "{{ config.kube_config.use_apps_apigroup }}"
  resources:
  - deployments
  - replicasets
  - daemonsets
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  {% if config.kube_config.pod_exec_resources_controller %}
  - pods
  - pods/exec
  {% endif %}
  - nodes
  - services/status
  {% if not config.kube_config.all_access_controller_clusterrole %}
  verbs:
  - update
  {% else %}
  verbs:
  - '*'
  {% endif %}
- apiGroups:
  - "monitoring.coreos.com"
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies/finalizers
  - snatpolicies/status
  - nodeinfos
  verbs:
  - update
  - create
  - list
  - watch
  - get
  - delete
- apiGroups:
  - "aci.snat"
  resources:
  - snatglobalinfos
  - snatpolicies
  - nodeinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - apps.openshift.io
  resources:
  - deploymentconfigs
  verbs:
  - list
  - watch
  - get
---
apiVersion: {{ config.kube_config.use_rbac_api }}
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
  name: aci-containers:host-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  {% if not config.kube_config.skip_namespace_resource_hostagent %}
  - namespaces
  {% endif %}
  - pods
  - endpoints
  - services
  {% if not config.kube_config.skip_replicationcontroller_resource_hostagent %}
  - replicationcontrollers
  {% endif %}
  verbs:
  - list
  - watch
  - get
{% if config.drop_log_config.enable %}
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
{% endif %}
{% if config.kube_config.use_aci_anywhere_crd %}
- apiGroups:
  - "aci.aw"
  resources:
  - podifs
  - podifs/status
  verbs:
  - "*"
{% endif %}
{% if not config.kube_config.no_hostagent_networking_clusterrole %}
- apiGroups:
  - "{{ config.kube_config.use_netpol_apigroup }}"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
{% endif %}
{% if not config.kube_config.no_hostagent_deployment_clusterrole %}
- apiGroups:
  - "{{ config.kube_config.use_apps_apigroup }}"
  resources:
  - deployments
  - replicasets
  verbs:
  - list
  - watch
  - get
{% endif %}
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies
  - snatglobalinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - nodeinfos
  verbs:
  - create
  - update
  - list
  - watch
  - get
{% if config.kube_config.host_agent_openshift_resource %}
- apiGroups:
  - "config.openshift.io"
  resources:
  - infrastructures
  verbs:
  - get
{% endif %}
---
apiVersion: {{ config.kube_config.use_rbac_api }}
kind: ClusterRoleBinding
metadata:
  name: aci-containers:controller
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:controller
subjects:
- kind: ServiceAccount
  name: aci-containers-controller
  namespace: {{ config.kube_config.system_namespace }}
---
apiVersion: {{ config.kube_config.use_rbac_api }}
kind: ClusterRoleBinding
metadata:
  name: aci-containers:host-agent
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:host-agent
subjects:
- kind: ServiceAccount
  name: aci-containers-host-agent
  namespace: {{ config.kube_config.system_namespace }}
---
{% endif %}
{% if config.kube_config.use_openshift_security_context_constraints %}
kind: SecurityContextConstraints
apiVersion: security.openshift.io/v1
metadata:
  name: aci-containers-scc
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
users:
  - system:serviceaccount:{{ config.kube_config.system_namespace }}:aci-containers-controller
  - system:serviceaccount:{{ config.kube_config.system_namespace }}:aci-containers-host-agent
allowHostDirVolumePlugin: true
allowHostIPC: true
allowHostNetwork: true
allowHostPID: true
allowHostPorts: true
allowPrivilegedContainer: true
allowedCapabilities:
- '*'
defaultAddCapabilities: []
requiredDropCapabilities: []
readOnlyRootFilesystem: false
fsGroup:
  type: RunAsAny
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: RunAsAny
supplementalGroups:
  type: RunAsAny
seccompProfiles:
- '*'
volumes:
- '*'
priority: 100
---
{% endif %}
apiVersion: {{ config.kube_config.use_apps_api }}
kind: DaemonSet
metadata:
  name: aci-containers-host
  namespace: {{ config.kube_config.system_namespace }}
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-host
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-host
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      {% if config.registry.image_pull_secret %}
      imagePullSecrets:
        - name: {{ config.registry.image_pull_secret|yaml_quote }}
      {% endif %}
      tolerations:
        - operator: Exists
          effect: NoSchedule
      {% if config.kube_config.use_cnideploy_initcontainer %}
      initContainers:
        - name: cnideploy
          image: {{ config.registry.image_prefix }}/cnideploy:{{ config.registry.cnideploy_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          securityContext:
            {% if config.kube_config.use_privileged_containers %}
            privileged: true
            {% endif %}
            capabilities:
              add:
                - SYS_ADMIN
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
      {% endif %}
      {% if not config.kube_config.no_priority_class %}
      priorityClassName: system-cluster-critical
      {% endif %}
      containers:
        - name: aci-containers-host
          image: {{ config.registry.image_prefix }}/aci-containers-host:{{ config.registry.aci_containers_host_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          securityContext:
            {% if config.kube_config.use_privileged_containers %}
            privileged: true
            {% endif %}
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
                - SYS_PTRACE
          env:
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TENANT
              value: {{config.kube_config.default_endpoint_group.tenant|json}}
            {% if config.kube_config.run_gbp_container %}
            - name: NODE_EPG
              value: {{config.aci_config.nodes_epg|json}}
            {% else %}
            - name: NODE_EPG
              value: "{{ config.aci_config.app_profile }}|{{ config.aci_config.nodes_epg }}"
            {% endif %}
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
            - name: cni-conf
              mountPath: /mnt/cni-conf
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: host-config-volume
              mountPath: /usr/local/etc/aci-containers/
          livenessProbe:
            httpGet:
              path: /status
              port: 8090
        - name: opflex-agent
          env:
            - name: REBOOT_WITH_OVS
              value: "{{ config.kube_config.reboot_opflex_with_ovs }}"
            {% if config.kube_config.run_gbp_container %}
            - name: SSL_MODE
              value: disabled
            {% endif %}
          image: {{ config.registry.image_prefix }}/opflex:{{ config.registry.opflex_agent_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          securityContext:
            {% if config.kube_config.use_privileged_containers %}
            privileged: true
            {% endif %}
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: opflex-config-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/conf.d
        {% if config.kube_config.run_opflex_server_container %}
        - name: opflex-server
          image: {{ config.registry.image_prefix }}/opflex-server:{{ config.registry.opflex_server_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          ports:
            - containerPort: {{
              config.net_config.opflex_server_port|json }}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: opflex-server-config-volume
              mountPath: /usr/local/etc/opflex-server
            - name: hostvar
              mountPath: /usr/local/var
        {% endif %}
        - name: mcast-daemon
          image: {{ config.registry.image_prefix }}/opflex:{{ config.registry.opflex_agent_version }}
          command: ["/bin/sh"]
          args: ["/usr/local/bin/launch-mcastdaemon.sh"]
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          {% if config.kube_config.use_privileged_containers %}
          securityContext:
            privileged: true
          {% endif %}
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
      restartPolicy: Always
      volumes:
        - name: cni-bin
          hostPath:
            path: {{ config.kube_config.host_agent_cni_bin_path }}
        - name: cni-conf
          hostPath:
            path: {{ config.kube_config.host_agent_cni_conf_path }}
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: host-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: host-agent-config
                path: host-agent.conf
        - name: opflex-hostconfig-volume
          emptyDir:
            medium: Memory
        - name: opflex-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: opflex-agent-config
                path: local.conf
        {% if config.kube_config.use_opflex_server_volume %}
        - name: opflex-server-config-volume
        {% endif %}
---
apiVersion: {{ config.kube_config.use_apps_api }}
kind: DaemonSet
metadata:
  name: aci-containers-openvswitch
  namespace: {{ config.kube_config.system_namespace }}
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-openvswitch
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-openvswitch
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      {% if config.registry.image_pull_secret %}
      imagePullSecrets:
        - name: {{ config.registry.image_pull_secret|yaml_quote }}
      {% endif %}
      tolerations:
        - operator: Exists
          effect: NoSchedule
      {% if not config.kube_config.no_priority_class %}
      priorityClassName: system-cluster-critical
      {% endif %}
      containers:
        - name: aci-containers-openvswitch
          image: {{ config.registry.image_prefix }}/openvswitch:{{ config.registry.openvswitch_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          resources:
            limits:
              memory: "{{ config.kube_config.ovs_memory_limit }}"
          securityContext:
            {% if config.kube_config.use_privileged_containers %}
            privileged: true
            {% endif %}
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
                - SYS_NICE
                - IPC_LOCK
          env:
            - name: OVS_RUNDIR
              value: /usr/local/var/run/openvswitch
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: hostetc
              mountPath: /usr/local/etc
            - name: hostmodules
              mountPath: /lib/modules
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/liveness-ovs.sh
      restartPolicy: Always
      volumes:
        - name: hostetc
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: hostmodules
          hostPath:
            path: /lib/modules
---
apiVersion: {{ config.kube_config.use_apps_api }}
kind: Deployment
metadata:
  name: aci-containers-controller
  namespace: {{ config.kube_config.system_namespace }}
  labels:
    aci-containers-config-version: "{{ config.registry.configuration_version }}"
    network-plugin: aci-containers
    name: aci-containers-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: aci-containers-controller
      network-plugin: aci-containers
  template:
    metadata:
      name: aci-containers-controller
      namespace: {{ config.kube_config.system_namespace }}
      labels:
        name: aci-containers-controller
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      serviceAccountName: aci-containers-controller
      {% if config.registry.image_pull_secret %}
      imagePullSecrets:
        - name: {{ config.registry.image_pull_secret|yaml_quote }}
      {% endif %}
      tolerations:
        - operator: Exists
          effect: NoSchedule
      {% if not config.kube_config.no_priority_class %}
      priorityClassName: system-node-critical
      {% endif %}
      containers:
        {% if config.kube_config.run_gbp_container %}
        - name: aci-gbpserver
          image: {{ config.registry.image_prefix }}/gbp-server:{{ config.registry.gbp_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
        {% if config.flavor == "cloud" %}
            - name: kafka-certs
              mountPath: /certs
        {% endif %}
          env:
            - name: GBP_SERVER_CONF
              value: /usr/local/etc/aci-containers/gbp-server.conf
        {% endif %}
        - name: aci-containers-controller
          image: {{ config.registry.image_prefix }}/aci-containers-controller:{{ config.registry.aci_containers_controller_version }}
          imagePullPolicy: {{ config.kube_config.image_pull_policy }}
          env:
            - name: WATCH_NAMESPACE
              value: "{{ config.kube_config.snat_operator.watch_namespace }}"
            - name: ACI_SNAT_NAMESPACE
              value: "{{ config.kube_config.snat_operator.snat_namespace }}"
            - name: ACI_SNAGLOBALINFO_NAME
              value: "{{ config.kube_config.snat_operator.globalinfo_name }}"
            - name: ACI_RDCONFIG_NAME
              value: "{{ config.kube_config.snat_operator.rdconfig_name }}"
            {% if config.istio_config.install_istio %}
            - name: SYSTEM_NAMESPACE
              value: "{{ config.kube_config.system_namespace}}"
            {% endif %}
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          livenessProbe:
            httpGet:
              path: /status
              port: 8091
      volumes:
        {% if config.flavor == "cloud" %}
        - name: kafka-certs
          secret:
            secretName: kafka-client-certificates
        {% endif %}
        - name: aci-user-cert-volume
          secret:
            secretName: aci-user-cert
        - name: controller-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: controller-config
                path: controller.conf
              {% if config.kube_config.run_gbp_container %}
              - key: gbp-server-config
                path: gbp-server.conf
              {% endif %}
